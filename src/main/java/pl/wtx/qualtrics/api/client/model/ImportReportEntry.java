/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * ImportReportEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ImportReportEntry {
  public static final String SERIALIZED_NAME_SOURCE_INDEX_ID = "sourceIndexId";
  @SerializedName(SERIALIZED_NAME_SOURCE_INDEX_ID)
  @javax.annotation.Nonnull
  private String sourceIndexId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nullable
  private String phone;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  @javax.annotation.Nullable
  private String contactId;

  public static final String SERIALIZED_NAME_IMPORT_STATUS = "importStatus";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS)
  @javax.annotation.Nullable
  private String importStatus;

  public static final String SERIALIZED_NAME_IMPORT_STATUS_CODE = "importStatusCode";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS_CODE)
  @javax.annotation.Nullable
  private String importStatusCode;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nullable
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  @javax.annotation.Nullable
  private String transactionStatus;

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS_CODE = "transactionStatusCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS_CODE)
  @javax.annotation.Nullable
  private String transactionStatusCode;

  public static final String SERIALIZED_NAME_CONTACT_LIST_CONTACT_ID = "contactListContactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_LIST_CONTACT_ID)
  @javax.annotation.Nullable
  private String contactListContactId;

  public static final String SERIALIZED_NAME_CONTACT_LIST_CONTACT_STATUS = "contactListContactStatus";
  @SerializedName(SERIALIZED_NAME_CONTACT_LIST_CONTACT_STATUS)
  @javax.annotation.Nullable
  private String contactListContactStatus;

  public static final String SERIALIZED_NAME_CONTACT_LIST_CONTACT_STATUS_CODE = "contactListContactStatusCode";
  @SerializedName(SERIALIZED_NAME_CONTACT_LIST_CONTACT_STATUS_CODE)
  @javax.annotation.Nullable
  private String contactListContactStatusCode;

  public ImportReportEntry() {
  }

  public ImportReportEntry sourceIndexId(@javax.annotation.Nonnull String sourceIndexId) {
    this.sourceIndexId = sourceIndexId;
    return this;
  }

  /**
   * Unique identifier of the source index.
   * @return sourceIndexId
   */
  @javax.annotation.Nonnull
  public String getSourceIndexId() {
    return sourceIndexId;
  }

  public void setSourceIndexId(@javax.annotation.Nonnull String sourceIndexId) {
    this.sourceIndexId = sourceIndexId;
  }


  public ImportReportEntry email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address of imported contact.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public ImportReportEntry phone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The contact&#39;s phone number.
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
  }


  public ImportReportEntry contactId(@javax.annotation.Nullable String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * Unique identifier for the imported contact.
   * @return contactId
   */
  @javax.annotation.Nullable
  public String getContactId() {
    return contactId;
  }

  public void setContactId(@javax.annotation.Nullable String contactId) {
    this.contactId = contactId;
  }


  public ImportReportEntry importStatus(@javax.annotation.Nullable String importStatus) {
    this.importStatus = importStatus;
    return this;
  }

  /**
   * Import status.
   * @return importStatus
   */
  @javax.annotation.Nullable
  public String getImportStatus() {
    return importStatus;
  }

  public void setImportStatus(@javax.annotation.Nullable String importStatus) {
    this.importStatus = importStatus;
  }


  public ImportReportEntry importStatusCode(@javax.annotation.Nullable String importStatusCode) {
    this.importStatusCode = importStatusCode;
    return this;
  }

  /**
   * Import status code.
   * @return importStatusCode
   */
  @javax.annotation.Nullable
  public String getImportStatusCode() {
    return importStatusCode;
  }

  public void setImportStatusCode(@javax.annotation.Nullable String importStatusCode) {
    this.importStatusCode = importStatusCode;
  }


  public ImportReportEntry transactionId(@javax.annotation.Nullable String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Unique identifier for this transaction.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nullable String transactionId) {
    this.transactionId = transactionId;
  }


  public ImportReportEntry transactionStatus(@javax.annotation.Nullable String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

  /**
   * Transaction status.
   * @return transactionStatus
   */
  @javax.annotation.Nullable
  public String getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(@javax.annotation.Nullable String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public ImportReportEntry transactionStatusCode(@javax.annotation.Nullable String transactionStatusCode) {
    this.transactionStatusCode = transactionStatusCode;
    return this;
  }

  /**
   * Transaction status code.
   * @return transactionStatusCode
   */
  @javax.annotation.Nullable
  public String getTransactionStatusCode() {
    return transactionStatusCode;
  }

  public void setTransactionStatusCode(@javax.annotation.Nullable String transactionStatusCode) {
    this.transactionStatusCode = transactionStatusCode;
  }


  public ImportReportEntry contactListContactId(@javax.annotation.Nullable String contactListContactId) {
    this.contactListContactId = contactListContactId;
    return this;
  }

  /**
   * Unique identifier for the contact list.
   * @return contactListContactId
   */
  @javax.annotation.Nullable
  public String getContactListContactId() {
    return contactListContactId;
  }

  public void setContactListContactId(@javax.annotation.Nullable String contactListContactId) {
    this.contactListContactId = contactListContactId;
  }


  public ImportReportEntry contactListContactStatus(@javax.annotation.Nullable String contactListContactStatus) {
    this.contactListContactStatus = contactListContactStatus;
    return this;
  }

  /**
   * Contact List status.
   * @return contactListContactStatus
   */
  @javax.annotation.Nullable
  public String getContactListContactStatus() {
    return contactListContactStatus;
  }

  public void setContactListContactStatus(@javax.annotation.Nullable String contactListContactStatus) {
    this.contactListContactStatus = contactListContactStatus;
  }


  public ImportReportEntry contactListContactStatusCode(@javax.annotation.Nullable String contactListContactStatusCode) {
    this.contactListContactStatusCode = contactListContactStatusCode;
    return this;
  }

  /**
   * Contact List status code.
   * @return contactListContactStatusCode
   */
  @javax.annotation.Nullable
  public String getContactListContactStatusCode() {
    return contactListContactStatusCode;
  }

  public void setContactListContactStatusCode(@javax.annotation.Nullable String contactListContactStatusCode) {
    this.contactListContactStatusCode = contactListContactStatusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportReportEntry importReportEntry = (ImportReportEntry) o;
    return Objects.equals(this.sourceIndexId, importReportEntry.sourceIndexId) &&
        Objects.equals(this.email, importReportEntry.email) &&
        Objects.equals(this.phone, importReportEntry.phone) &&
        Objects.equals(this.contactId, importReportEntry.contactId) &&
        Objects.equals(this.importStatus, importReportEntry.importStatus) &&
        Objects.equals(this.importStatusCode, importReportEntry.importStatusCode) &&
        Objects.equals(this.transactionId, importReportEntry.transactionId) &&
        Objects.equals(this.transactionStatus, importReportEntry.transactionStatus) &&
        Objects.equals(this.transactionStatusCode, importReportEntry.transactionStatusCode) &&
        Objects.equals(this.contactListContactId, importReportEntry.contactListContactId) &&
        Objects.equals(this.contactListContactStatus, importReportEntry.contactListContactStatus) &&
        Objects.equals(this.contactListContactStatusCode, importReportEntry.contactListContactStatusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceIndexId, email, phone, contactId, importStatus, importStatusCode, transactionId, transactionStatus, transactionStatusCode, contactListContactId, contactListContactStatus, contactListContactStatusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportReportEntry {\n");
    sb.append("    sourceIndexId: ").append(toIndentedString(sourceIndexId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    importStatus: ").append(toIndentedString(importStatus)).append("\n");
    sb.append("    importStatusCode: ").append(toIndentedString(importStatusCode)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    transactionStatusCode: ").append(toIndentedString(transactionStatusCode)).append("\n");
    sb.append("    contactListContactId: ").append(toIndentedString(contactListContactId)).append("\n");
    sb.append("    contactListContactStatus: ").append(toIndentedString(contactListContactStatus)).append("\n");
    sb.append("    contactListContactStatusCode: ").append(toIndentedString(contactListContactStatusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceIndexId");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("contactId");
    openapiFields.add("importStatus");
    openapiFields.add("importStatusCode");
    openapiFields.add("transactionId");
    openapiFields.add("transactionStatus");
    openapiFields.add("transactionStatusCode");
    openapiFields.add("contactListContactId");
    openapiFields.add("contactListContactStatus");
    openapiFields.add("contactListContactStatusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceIndexId");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("contactId");
    openapiRequiredFields.add("importStatus");
    openapiRequiredFields.add("importStatusCode");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("transactionStatus");
    openapiRequiredFields.add("transactionStatusCode");
    openapiRequiredFields.add("contactListContactId");
    openapiRequiredFields.add("contactListContactStatus");
    openapiRequiredFields.add("contactListContactStatusCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportReportEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportReportEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportReportEntry is not found in the empty JSON string", ImportReportEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportReportEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportReportEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportReportEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sourceIndexId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIndexId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIndexId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("contactId") != null && !jsonObj.get("contactId").isJsonNull()) && !jsonObj.get("contactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactId").toString()));
      }
      if ((jsonObj.get("importStatus") != null && !jsonObj.get("importStatus").isJsonNull()) && !jsonObj.get("importStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importStatus").toString()));
      }
      if ((jsonObj.get("importStatusCode") != null && !jsonObj.get("importStatusCode").isJsonNull()) && !jsonObj.get("importStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importStatusCode").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("transactionStatus") != null && !jsonObj.get("transactionStatus").isJsonNull()) && !jsonObj.get("transactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionStatus").toString()));
      }
      if ((jsonObj.get("transactionStatusCode") != null && !jsonObj.get("transactionStatusCode").isJsonNull()) && !jsonObj.get("transactionStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionStatusCode").toString()));
      }
      if ((jsonObj.get("contactListContactId") != null && !jsonObj.get("contactListContactId").isJsonNull()) && !jsonObj.get("contactListContactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactListContactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactListContactId").toString()));
      }
      if ((jsonObj.get("contactListContactStatus") != null && !jsonObj.get("contactListContactStatus").isJsonNull()) && !jsonObj.get("contactListContactStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactListContactStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactListContactStatus").toString()));
      }
      if ((jsonObj.get("contactListContactStatusCode") != null && !jsonObj.get("contactListContactStatusCode").isJsonNull()) && !jsonObj.get("contactListContactStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactListContactStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactListContactStatusCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportReportEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportReportEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportReportEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportReportEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportReportEntry>() {
           @Override
           public void write(JsonWriter out, ImportReportEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportReportEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportReportEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportReportEntry
   * @throws IOException if the JSON string is invalid with respect to ImportReportEntry
   */
  public static ImportReportEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportReportEntry.class);
  }

  /**
   * Convert an instance of ImportReportEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

