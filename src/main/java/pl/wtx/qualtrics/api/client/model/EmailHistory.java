/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import pl.wtx.qualtrics.api.client.model.EmailHistoryBounceInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * EmailHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class EmailHistory {
  public static final String SERIALIZED_NAME_DISTRIBUTION_ID = "distributionId";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_ID)
  @javax.annotation.Nullable
  private String distributionId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  /**
   * Indicates whether the email was successfully delivered, bounced when it did not reach the recipient&#39;s inbox, blocked because of a duplicate email, errored out, skipped due to contact frequency settings, or still pending.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    SUCCESS("Success"),
    
    BOUNCE("Bounce"),
    
    BLOCKED("Blocked"),
    
    ERROR("Error"),
    
    SKIPPED("Skipped"),
    
    PENDING("Pending");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  @javax.annotation.Nullable
  private ResultEnum result;

  public static final String SERIALIZED_NAME_BOUNCE_INFO = "bounceInfo";
  @SerializedName(SERIALIZED_NAME_BOUNCE_INFO)
  @javax.annotation.Nullable
  private EmailHistoryBounceInfo bounceInfo;

  public static final String SERIALIZED_NAME_SURVEY_ID = "surveyId";
  @SerializedName(SERIALIZED_NAME_SURVEY_ID)
  @javax.annotation.Nullable
  private String surveyId;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  @javax.annotation.Nullable
  private Boolean read;

  public EmailHistory() {
  }

  public EmailHistory distributionId(@javax.annotation.Nullable String distributionId) {
    this.distributionId = distributionId;
    return this;
  }

  /**
   * The distribution&#39;s ID, which can be used with Get Distribution to obtain more information about the distribution.
   * @return distributionId
   */
  @javax.annotation.Nullable
  public String getDistributionId() {
    return distributionId;
  }

  public void setDistributionId(@javax.annotation.Nullable String distributionId) {
    this.distributionId = distributionId;
  }


  public EmailHistory date(@javax.annotation.Nullable OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * UTC time of the distribution event in yyyy-MM-dd HH:mm:ss format.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable OffsetDateTime date) {
    this.date = date;
  }


  public EmailHistory type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of email distribution. Either Invite, ThankYou, or Reminder.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public EmailHistory result(@javax.annotation.Nullable ResultEnum result) {
    this.result = result;
    return this;
  }

  /**
   * Indicates whether the email was successfully delivered, bounced when it did not reach the recipient&#39;s inbox, blocked because of a duplicate email, errored out, skipped due to contact frequency settings, or still pending.
   * @return result
   */
  @javax.annotation.Nullable
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(@javax.annotation.Nullable ResultEnum result) {
    this.result = result;
  }


  public EmailHistory bounceInfo(@javax.annotation.Nullable EmailHistoryBounceInfo bounceInfo) {
    this.bounceInfo = bounceInfo;
    return this;
  }

  /**
   * Get bounceInfo
   * @return bounceInfo
   */
  @javax.annotation.Nullable
  public EmailHistoryBounceInfo getBounceInfo() {
    return bounceInfo;
  }

  public void setBounceInfo(@javax.annotation.Nullable EmailHistoryBounceInfo bounceInfo) {
    this.bounceInfo = bounceInfo;
  }


  public EmailHistory surveyId(@javax.annotation.Nullable String surveyId) {
    this.surveyId = surveyId;
    return this;
  }

  /**
   * The survey ID of the survey referenced by this distribution.
   * @return surveyId
   */
  @javax.annotation.Nullable
  public String getSurveyId() {
    return surveyId;
  }

  public void setSurveyId(@javax.annotation.Nullable String surveyId) {
    this.surveyId = surveyId;
  }


  public EmailHistory read(@javax.annotation.Nullable Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * Indicates whether the distribution email has been read.
   * @return read
   */
  @javax.annotation.Nullable
  public Boolean getRead() {
    return read;
  }

  public void setRead(@javax.annotation.Nullable Boolean read) {
    this.read = read;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailHistory emailHistory = (EmailHistory) o;
    return Objects.equals(this.distributionId, emailHistory.distributionId) &&
        Objects.equals(this.date, emailHistory.date) &&
        Objects.equals(this.type, emailHistory.type) &&
        Objects.equals(this.result, emailHistory.result) &&
        Objects.equals(this.bounceInfo, emailHistory.bounceInfo) &&
        Objects.equals(this.surveyId, emailHistory.surveyId) &&
        Objects.equals(this.read, emailHistory.read);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributionId, date, type, result, bounceInfo, surveyId, read);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailHistory {\n");
    sb.append("    distributionId: ").append(toIndentedString(distributionId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    bounceInfo: ").append(toIndentedString(bounceInfo)).append("\n");
    sb.append("    surveyId: ").append(toIndentedString(surveyId)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distributionId");
    openapiFields.add("date");
    openapiFields.add("type");
    openapiFields.add("result");
    openapiFields.add("bounceInfo");
    openapiFields.add("surveyId");
    openapiFields.add("read");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailHistory is not found in the empty JSON string", EmailHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("distributionId") != null && !jsonObj.get("distributionId").isJsonNull()) && !jsonObj.get("distributionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distributionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distributionId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ResultEnum.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `bounceInfo`
      if (jsonObj.get("bounceInfo") != null && !jsonObj.get("bounceInfo").isJsonNull()) {
        EmailHistoryBounceInfo.validateJsonElement(jsonObj.get("bounceInfo"));
      }
      if ((jsonObj.get("surveyId") != null && !jsonObj.get("surveyId").isJsonNull()) && !jsonObj.get("surveyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surveyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surveyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailHistory>() {
           @Override
           public void write(JsonWriter out, EmailHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailHistory
   * @throws IOException if the JSON string is invalid with respect to EmailHistory
   */
  public static EmailHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailHistory.class);
  }

  /**
   * Convert an instance of EmailHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

