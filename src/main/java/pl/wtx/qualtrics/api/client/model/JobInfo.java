/*
 * EX APIs
 * This is the external API specification for EX endpoints.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.qualtrics.api.client.model.JobTypeEnum;
import pl.wtx.qualtrics.api.client.model.Meta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * JobInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class JobInfo {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  @javax.annotation.Nonnull
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  @javax.annotation.Nonnull
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  @javax.annotation.Nonnull
  private String creationDate;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENT = "progressPercent";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENT)
  @javax.annotation.Nonnull
  private String progressPercent;

  public static final String SERIALIZED_NAME_RESULT_ID = "resultId";
  @SerializedName(SERIALIZED_NAME_RESULT_ID)
  @javax.annotation.Nullable
  private String resultId;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  @javax.annotation.Nonnull
  private Meta meta;

  public JobInfo() {
  }

  public JobInfo jobId(@javax.annotation.Nonnull String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(@javax.annotation.Nonnull String jobId) {
    this.jobId = jobId;
  }


  public JobInfo jobType(@javax.annotation.Nonnull JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(@javax.annotation.Nonnull JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  public JobInfo creationDate(@javax.annotation.Nonnull String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(@javax.annotation.Nonnull String creationDate) {
    this.creationDate = creationDate;
  }


  public JobInfo progressPercent(@javax.annotation.Nonnull String progressPercent) {
    this.progressPercent = progressPercent;
    return this;
  }

  /**
   * Get progressPercent
   * @return progressPercent
   */
  @javax.annotation.Nonnull
  public String getProgressPercent() {
    return progressPercent;
  }

  public void setProgressPercent(@javax.annotation.Nonnull String progressPercent) {
    this.progressPercent = progressPercent;
  }


  public JobInfo resultId(@javax.annotation.Nullable String resultId) {
    this.resultId = resultId;
    return this;
  }

  /**
   * Get resultId
   * @return resultId
   */
  @javax.annotation.Nullable
  public String getResultId() {
    return resultId;
  }

  public void setResultId(@javax.annotation.Nullable String resultId) {
    this.resultId = resultId;
  }


  public JobInfo meta(@javax.annotation.Nonnull Meta meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nonnull
  public Meta getMeta() {
    return meta;
  }

  public void setMeta(@javax.annotation.Nonnull Meta meta) {
    this.meta = meta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobInfo jobInfo = (JobInfo) o;
    return Objects.equals(this.jobId, jobInfo.jobId) &&
        Objects.equals(this.jobType, jobInfo.jobType) &&
        Objects.equals(this.creationDate, jobInfo.creationDate) &&
        Objects.equals(this.progressPercent, jobInfo.progressPercent) &&
        Objects.equals(this.resultId, jobInfo.resultId) &&
        Objects.equals(this.meta, jobInfo.meta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, jobType, creationDate, progressPercent, resultId, meta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobInfo {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    progressPercent: ").append(toIndentedString(progressPercent)).append("\n");
    sb.append("    resultId: ").append(toIndentedString(resultId)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("jobType");
    openapiFields.add("creationDate");
    openapiFields.add("progressPercent");
    openapiFields.add("resultId");
    openapiFields.add("meta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("jobType");
    openapiRequiredFields.add("creationDate");
    openapiRequiredFields.add("progressPercent");
    openapiRequiredFields.add("meta");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobInfo is not found in the empty JSON string", JobInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      // validate the required field `jobType`
      JobTypeEnum.validateJsonElement(jsonObj.get("jobType"));
      if (!jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if (!jsonObj.get("progressPercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progressPercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progressPercent").toString()));
      }
      if ((jsonObj.get("resultId") != null && !jsonObj.get("resultId").isJsonNull()) && !jsonObj.get("resultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultId").toString()));
      }
      // validate the required field `meta`
      Meta.validateJsonElement(jsonObj.get("meta"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<JobInfo>() {
           @Override
           public void write(JsonWriter out, JobInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobInfo
   * @throws IOException if the JSON string is invalid with respect to JobInfo
   */
  public static JobInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobInfo.class);
  }

  /**
   * Convert an instance of JobInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

