/*
 * EX APIs
 * This is the external API specification for EX endpoints.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import pl.wtx.qualtrics.api.client.model.ParticipantData;
import pl.wtx.qualtrics.api.client.model.SubjectData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * Participant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Participant {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nonnull
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nonnull
  private String lastName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private String userId;

  public static final String SERIALIZED_NAME_PARTICIPANT_ID = "participantId";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ID)
  @javax.annotation.Nonnull
  private String participantId;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "uniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  @javax.annotation.Nonnull
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nonnull
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PARTICIPANT_DATA = "participantData";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_DATA)
  @javax.annotation.Nullable
  private ParticipantData participantData;

  public static final String SERIALIZED_NAME_SUBJECT_DATA = "subjectData";
  @SerializedName(SERIALIZED_NAME_SUBJECT_DATA)
  @javax.annotation.Nullable
  private SubjectData subjectData;

  public Participant() {
  }

  public Participant firstName(@javax.annotation.Nonnull String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nonnull String firstName) {
    this.firstName = firstName;
  }


  public Participant lastName(@javax.annotation.Nonnull String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nonnull String lastName) {
    this.lastName = lastName;
  }


  public Participant email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public Participant username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public Participant userId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull String userId) {
    this.userId = userId;
  }


  public Participant participantId(@javax.annotation.Nonnull String participantId) {
    this.participantId = participantId;
    return this;
  }

  /**
   * Get participantId
   * @return participantId
   */
  @javax.annotation.Nonnull
  public String getParticipantId() {
    return participantId;
  }

  public void setParticipantId(@javax.annotation.Nonnull String participantId) {
    this.participantId = participantId;
  }


  public Participant uniqueIdentifier(@javax.annotation.Nonnull String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * Get uniqueIdentifier
   * @return uniqueIdentifier
   */
  @javax.annotation.Nonnull
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(@javax.annotation.Nonnull String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public Participant metadata(@javax.annotation.Nonnull Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Participant putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nonnull Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public Participant participantData(@javax.annotation.Nullable ParticipantData participantData) {
    this.participantData = participantData;
    return this;
  }

  /**
   * Get participantData
   * @return participantData
   */
  @javax.annotation.Nullable
  public ParticipantData getParticipantData() {
    return participantData;
  }

  public void setParticipantData(@javax.annotation.Nullable ParticipantData participantData) {
    this.participantData = participantData;
  }


  public Participant subjectData(@javax.annotation.Nullable SubjectData subjectData) {
    this.subjectData = subjectData;
    return this;
  }

  /**
   * Get subjectData
   * @return subjectData
   */
  @javax.annotation.Nullable
  public SubjectData getSubjectData() {
    return subjectData;
  }

  public void setSubjectData(@javax.annotation.Nullable SubjectData subjectData) {
    this.subjectData = subjectData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Participant participant = (Participant) o;
    return Objects.equals(this.firstName, participant.firstName) &&
        Objects.equals(this.lastName, participant.lastName) &&
        Objects.equals(this.email, participant.email) &&
        Objects.equals(this.username, participant.username) &&
        Objects.equals(this.userId, participant.userId) &&
        Objects.equals(this.participantId, participant.participantId) &&
        Objects.equals(this.uniqueIdentifier, participant.uniqueIdentifier) &&
        Objects.equals(this.metadata, participant.metadata) &&
        Objects.equals(this.participantData, participant.participantData) &&
        Objects.equals(this.subjectData, participant.subjectData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, email, username, userId, participantId, uniqueIdentifier, metadata, participantData, subjectData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Participant {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    participantData: ").append(toIndentedString(participantData)).append("\n");
    sb.append("    subjectData: ").append(toIndentedString(subjectData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("email");
    openapiFields.add("username");
    openapiFields.add("userId");
    openapiFields.add("participantId");
    openapiFields.add("uniqueIdentifier");
    openapiFields.add("metadata");
    openapiFields.add("participantData");
    openapiFields.add("subjectData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("participantId");
    openapiRequiredFields.add("uniqueIdentifier");
    openapiRequiredFields.add("metadata");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Participant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Participant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Participant is not found in the empty JSON string", Participant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Participant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Participant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Participant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("participantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantId").toString()));
      }
      if (!jsonObj.get("uniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIdentifier").toString()));
      }
      // validate the optional field `participantData`
      if (jsonObj.get("participantData") != null && !jsonObj.get("participantData").isJsonNull()) {
        ParticipantData.validateJsonElement(jsonObj.get("participantData"));
      }
      // validate the optional field `subjectData`
      if (jsonObj.get("subjectData") != null && !jsonObj.get("subjectData").isJsonNull()) {
        SubjectData.validateJsonElement(jsonObj.get("subjectData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Participant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Participant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Participant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Participant.class));

       return (TypeAdapter<T>) new TypeAdapter<Participant>() {
           @Override
           public void write(JsonWriter out, Participant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Participant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Participant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Participant
   * @throws IOException if the JSON string is invalid with respect to Participant
   */
  public static Participant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Participant.class);
  }

  /**
   * Convert an instance of Participant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

