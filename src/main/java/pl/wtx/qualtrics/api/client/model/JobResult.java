/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.qualtrics.api.client.model.JobResultsBucket;
import pl.wtx.qualtrics.api.client.model.Meta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * JobResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class JobResult {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  @javax.annotation.Nonnull
  private String jobId;

  public static final String SERIALIZED_NAME_RESULT_ID = "resultId";
  @SerializedName(SERIALIZED_NAME_RESULT_ID)
  @javax.annotation.Nonnull
  private String resultId;

  public static final String SERIALIZED_NAME_SUCCESSFUL_COUNT = "successfulCount";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_COUNT)
  @javax.annotation.Nonnull
  private Integer successfulCount;

  public static final String SERIALIZED_NAME_FAILED_COUNT = "failedCount";
  @SerializedName(SERIALIZED_NAME_FAILED_COUNT)
  @javax.annotation.Nonnull
  private Integer failedCount;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  @javax.annotation.Nonnull
  private List<JobResultsBucket> failed = new ArrayList<>();

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  @javax.annotation.Nullable
  private Meta meta;

  public JobResult() {
  }

  public JobResult jobId(@javax.annotation.Nonnull String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(@javax.annotation.Nonnull String jobId) {
    this.jobId = jobId;
  }


  public JobResult resultId(@javax.annotation.Nonnull String resultId) {
    this.resultId = resultId;
    return this;
  }

  /**
   * Get resultId
   * @return resultId
   */
  @javax.annotation.Nonnull
  public String getResultId() {
    return resultId;
  }

  public void setResultId(@javax.annotation.Nonnull String resultId) {
    this.resultId = resultId;
  }


  public JobResult successfulCount(@javax.annotation.Nonnull Integer successfulCount) {
    this.successfulCount = successfulCount;
    return this;
  }

  /**
   * Get successfulCount
   * @return successfulCount
   */
  @javax.annotation.Nonnull
  public Integer getSuccessfulCount() {
    return successfulCount;
  }

  public void setSuccessfulCount(@javax.annotation.Nonnull Integer successfulCount) {
    this.successfulCount = successfulCount;
  }


  public JobResult failedCount(@javax.annotation.Nonnull Integer failedCount) {
    this.failedCount = failedCount;
    return this;
  }

  /**
   * Get failedCount
   * @return failedCount
   */
  @javax.annotation.Nonnull
  public Integer getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(@javax.annotation.Nonnull Integer failedCount) {
    this.failedCount = failedCount;
  }


  public JobResult failed(@javax.annotation.Nonnull List<JobResultsBucket> failed) {
    this.failed = failed;
    return this;
  }

  public JobResult addFailedItem(JobResultsBucket failedItem) {
    if (this.failed == null) {
      this.failed = new ArrayList<>();
    }
    this.failed.add(failedItem);
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nonnull
  public List<JobResultsBucket> getFailed() {
    return failed;
  }

  public void setFailed(@javax.annotation.Nonnull List<JobResultsBucket> failed) {
    this.failed = failed;
  }


  public JobResult meta(@javax.annotation.Nullable Meta meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nullable
  public Meta getMeta() {
    return meta;
  }

  public void setMeta(@javax.annotation.Nullable Meta meta) {
    this.meta = meta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobResult jobResult = (JobResult) o;
    return Objects.equals(this.jobId, jobResult.jobId) &&
        Objects.equals(this.resultId, jobResult.resultId) &&
        Objects.equals(this.successfulCount, jobResult.successfulCount) &&
        Objects.equals(this.failedCount, jobResult.failedCount) &&
        Objects.equals(this.failed, jobResult.failed) &&
        Objects.equals(this.meta, jobResult.meta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, resultId, successfulCount, failedCount, failed, meta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobResult {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    resultId: ").append(toIndentedString(resultId)).append("\n");
    sb.append("    successfulCount: ").append(toIndentedString(successfulCount)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("resultId");
    openapiFields.add("successfulCount");
    openapiFields.add("failedCount");
    openapiFields.add("failed");
    openapiFields.add("meta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("resultId");
    openapiRequiredFields.add("successfulCount");
    openapiRequiredFields.add("failedCount");
    openapiRequiredFields.add("failed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobResult is not found in the empty JSON string", JobResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if (!jsonObj.get("resultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("failed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failed` to be an array in the JSON string but got `%s`", jsonObj.get("failed").toString()));
      }

      JsonArray jsonArrayfailed = jsonObj.getAsJsonArray("failed");
      // validate the required field `failed` (array)
      for (int i = 0; i < jsonArrayfailed.size(); i++) {
        JobResultsBucket.validateJsonElement(jsonArrayfailed.get(i));
      };
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        Meta.validateJsonElement(jsonObj.get("meta"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobResult.class));

       return (TypeAdapter<T>) new TypeAdapter<JobResult>() {
           @Override
           public void write(JsonWriter out, JobResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobResult
   * @throws IOException if the JSON string is invalid with respect to JobResult
   */
  public static JobResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobResult.class);
  }

  /**
   * Convert an instance of JobResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

