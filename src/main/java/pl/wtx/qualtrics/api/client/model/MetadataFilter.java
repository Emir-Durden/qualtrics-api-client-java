/*
 * EX APIs
 * This is the external API specification for EX endpoints.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.qualtrics.api.client.model.MetadataFilterOperators;
import pl.wtx.qualtrics.api.client.model.MetadataFilterTypes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * MetadataFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class MetadataFilter {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private MetadataFilterTypes type;

  public static final String SERIALIZED_NAME_METADATA_FIELD = "metadataField";
  @SerializedName(SERIALIZED_NAME_METADATA_FIELD)
  @javax.annotation.Nonnull
  private String metadataField;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nonnull
  private String value;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  @javax.annotation.Nonnull
  private MetadataFilterOperators operator;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "dateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  @javax.annotation.Nullable
  private String dateFormat;

  public MetadataFilter() {
  }

  public MetadataFilter type(@javax.annotation.Nonnull MetadataFilterTypes type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public MetadataFilterTypes getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull MetadataFilterTypes type) {
    this.type = type;
  }


  public MetadataFilter metadataField(@javax.annotation.Nonnull String metadataField) {
    this.metadataField = metadataField;
    return this;
  }

  /**
   * Get metadataField
   * @return metadataField
   */
  @javax.annotation.Nonnull
  public String getMetadataField() {
    return metadataField;
  }

  public void setMetadataField(@javax.annotation.Nonnull String metadataField) {
    this.metadataField = metadataField;
  }


  public MetadataFilter value(@javax.annotation.Nonnull String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }


  public MetadataFilter operator(@javax.annotation.Nonnull MetadataFilterOperators operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nonnull
  public MetadataFilterOperators getOperator() {
    return operator;
  }

  public void setOperator(@javax.annotation.Nonnull MetadataFilterOperators operator) {
    this.operator = operator;
  }


  public MetadataFilter dateFormat(@javax.annotation.Nullable String dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

  /**
   * Get dateFormat
   * @return dateFormat
   */
  @javax.annotation.Nullable
  public String getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(@javax.annotation.Nullable String dateFormat) {
    this.dateFormat = dateFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataFilter metadataFilter = (MetadataFilter) o;
    return Objects.equals(this.type, metadataFilter.type) &&
        Objects.equals(this.metadataField, metadataFilter.metadataField) &&
        Objects.equals(this.value, metadataFilter.value) &&
        Objects.equals(this.operator, metadataFilter.operator) &&
        Objects.equals(this.dateFormat, metadataFilter.dateFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, metadataField, value, operator, dateFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataFilter {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    metadataField: ").append(toIndentedString(metadataField)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("metadataField");
    openapiFields.add("value");
    openapiFields.add("operator");
    openapiFields.add("dateFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("metadataField");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("operator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetadataFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetadataFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataFilter is not found in the empty JSON string", MetadataFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetadataFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetadataFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetadataFilter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      MetadataFilterTypes.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("metadataField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataField").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // validate the required field `operator`
      MetadataFilterOperators.validateJsonElement(jsonObj.get("operator"));
      if ((jsonObj.get("dateFormat") != null && !jsonObj.get("dateFormat").isJsonNull()) && !jsonObj.get("dateFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataFilter>() {
           @Override
           public void write(JsonWriter out, MetadataFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetadataFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetadataFilter
   * @throws IOException if the JSON string is invalid with respect to MetadataFilter
   */
  public static MetadataFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataFilter.class);
  }

  /**
   * Convert an instance of MetadataFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

