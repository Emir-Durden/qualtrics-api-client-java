/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client;

import pl.wtx.qualtrics.api.client.invoker.ApiCallback;
import pl.wtx.qualtrics.api.client.invoker.ApiClient;
import pl.wtx.qualtrics.api.client.invoker.ApiException;
import pl.wtx.qualtrics.api.client.invoker.ApiResponse;
import pl.wtx.qualtrics.api.client.invoker.Configuration;
import pl.wtx.qualtrics.api.client.invoker.Pair;
import pl.wtx.qualtrics.api.client.invoker.ProgressRequestBody;
import pl.wtx.qualtrics.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.qualtrics.api.client.model.CreateTransactionContactsImportRequest;
import pl.wtx.qualtrics.api.client.model.CreateTransactionContactsImportResponse;
import pl.wtx.qualtrics.api.client.model.DefaultErrorResponse;
import pl.wtx.qualtrics.api.client.model.GetImportReportResponse;
import pl.wtx.qualtrics.api.client.model.GetTransactionContactsImportStatusResponse;
import pl.wtx.qualtrics.api.client.model.GetTransactionContactsImportSummaryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactImportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactImportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactImportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTransactionContactsImport
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createTransactionContactsImportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Import Contacts into Mailing List with Transactions Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionContactsImportCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateTransactionContactsImportRequest createTransactionContactsImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTransactionContactsImportRequest;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts"
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionContactsImportValidateBeforeCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateTransactionContactsImportRequest createTransactionContactsImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling createTransactionContactsImport(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling createTransactionContactsImport(Async)");
        }

        return createTransactionContactsImportCall(mailingListId, directoryId, createTransactionContactsImportRequest, _callback);

    }

    /**
     * Create Transaction Contacts Import
     * Import contacts into the specified mailing list - contacts can have associated transaction data. &lt;!--From Readme--&gt; To check on the status of your import use [Transaction Contacts Import Status](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts~1{importId}/get) or follow the **url** value nested under the &#x60;tracking&#x60; key in the API response. &lt;!-- theme: danger --&gt;  &gt;#### JSON Body Size Limit &gt;The size of the JSON body accepted by this API call is 5 MB with a maximum of 10,000 contacts per import. &gt; &gt;The API request will return an error if the size of the body or contact count exceed the aforementioned limits.  &lt;!-- theme: danger --&gt; &gt;#### Concurrent Execution Limit &gt;By default, the concurrent execution limit is 25 jobs by default, and an individual brand may only enqueue up to 100 jobs before they are rejected.   &lt;!-- theme: info --&gt; &gt;#### Understanding contacts.unprocessed in the API response &gt;This JSON array has items which are integers. Each integer represents the index of a JSON object in the API request&#39;s contacts array. &gt; &gt;A contact can fail to process for several reasons, some of which are detailed in the below sections: &gt;* &#x60;transactionData&#x60; &gt;* &#x60;embeddedData&#x60; &gt; &gt;Several other reasons include: &gt;- &#x60;transactionData&#x60; or &#x60;embeddedData&#x60; are not JSON objects &gt;- Keys in the &#x60;contact&#x60; object do not adhere to their type restrictions specified.   &lt;!-- theme: info --&gt; &gt;#### Contact deduplication &gt;If your organization has deduplication settings on, then any &#x60;contact&#x60; in the request body that matches an existing contact (in the directory or the specified mailing list) based on those deduplication settings will be merged with said existing contact. &gt; &gt;If the previously existing contact has a transaction associated with it, and a &#x60;contact&#x60; matching by deduplication is included in this API request body, then the existing contact will be updated. Thus, the existing contact will now have two transactions instead of one.  &gt; &gt;Furthermore, any information that was previously specified or not-specified for the contact, if included in this API&#39;s request body, will also be updated for the existing contact.    ## transactionMeta  The &#x60;transactionMeta&#x60; key is only required if &#x60;transactionData&#x60; is supplied in the contact body. If supplied, it is a JSON object, and is constructed as follows:  #### JSON Syntax &#x60;&#x60;&#x60; {\&quot;fields\&quot;: fields,\&quot;batchId\&quot;: batchId} &#x60;&#x60;&#x60;   #### As transactionMeta &#x60;&#x60;&#x60; \&quot;transactionMeta\&quot;: {\&quot;fields\&quot;: [\&quot;field1\&quot;,\&quot;field2\&quot;],\&quot;batchId\&quot;: batchId} &#x60;&#x60;&#x60;   ## fields  **JSON data type**: array Must have a minimum of one item in the array; there is no maximum.  All the items in this array must be JSON strings, or else the API request will return an error response.  ## batchId  **JSON data type**: string This key-value pair is required. The provided value must be a [Create Transaction Batch](./transactionBatches.json/paths/~1directories~1{directoryId}~1transactionbatches/post) ID.  The transaction batch associated with the provided ID must exist. If it does not exist, transactions will not be created and added.  All created transactions will be added to the specified transaction batch. You may paginate through all the [transactions in a batch](./transactionBatches.json/paths/~1directories~1{directoryId}~1transactionbatches~1{batchId}~1transactions/get).   ## contacts  **JSON data type**: array Must have a minimum of one item in the array; there is no maximum.  Each item in the &#x60;contacts&#x60; array for the API request must be a contact.  ## contact  **JSON data type**: object  The **optional** keys are: - &#x60;firstName&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;lastName&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;email&#x60;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string and conform to valid email format) - &#x60;embeddedData&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(see &#x60;embeddedData&#x60; below) - &#x60;language&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;extRef&#x60;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;unsubscribed&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON boolean) - &#x60;transactionData&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(see &#x60;transactionData&#x60; below) &lt;!-- theme: info --&gt;  &gt;### Do Not Use Null &gt;The value &#x60;null&#x60; is not a valid value for these keys. If you do not want to include one of the optional keys, then you must omit it entirely from the JSON.    ## transactionData  **JSON data type**: object  This JSON object (if supplied) must, **at a minimum**, have keys that match at least one of the elements seen in &#x60;fields&#x60; above. If this object has keys that are not specified in &#x60;transactionMeta.fields&#x60;, the contact with the extraneous fields will be counted toward &#x60;contacts.unprocessed&#x60;. Transaction key-value pairs are solely dictated by the items in &#x60;transactionMeta.fields&#x60;.  The values of the keys can be JSON strings, numbers or booleans.  ## embeddedData  **JSON data type**: object  This JSON object must have keys that **do not** match **any of** the elements seen in **fields** above. If this object has keys that are in &#x60;transactionMeta.fields&#x60;, the contact encapsulating this JSON object is added to &#x60;contacts.unprocessed&#x60; array in the API response.  The values of the keys can be JSON strings, numbers or booleans. 
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createTransactionContactsImportRequest  (optional)
     * @return CreateTransactionContactsImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Import Contacts into Mailing List with Transactions Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTransactionContactsImportResponse createTransactionContactsImport(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateTransactionContactsImportRequest createTransactionContactsImportRequest) throws ApiException {
        ApiResponse<CreateTransactionContactsImportResponse> localVarResp = createTransactionContactsImportWithHttpInfo(mailingListId, directoryId, createTransactionContactsImportRequest);
        return localVarResp.getData();
    }

    /**
     * Create Transaction Contacts Import
     * Import contacts into the specified mailing list - contacts can have associated transaction data. &lt;!--From Readme--&gt; To check on the status of your import use [Transaction Contacts Import Status](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts~1{importId}/get) or follow the **url** value nested under the &#x60;tracking&#x60; key in the API response. &lt;!-- theme: danger --&gt;  &gt;#### JSON Body Size Limit &gt;The size of the JSON body accepted by this API call is 5 MB with a maximum of 10,000 contacts per import. &gt; &gt;The API request will return an error if the size of the body or contact count exceed the aforementioned limits.  &lt;!-- theme: danger --&gt; &gt;#### Concurrent Execution Limit &gt;By default, the concurrent execution limit is 25 jobs by default, and an individual brand may only enqueue up to 100 jobs before they are rejected.   &lt;!-- theme: info --&gt; &gt;#### Understanding contacts.unprocessed in the API response &gt;This JSON array has items which are integers. Each integer represents the index of a JSON object in the API request&#39;s contacts array. &gt; &gt;A contact can fail to process for several reasons, some of which are detailed in the below sections: &gt;* &#x60;transactionData&#x60; &gt;* &#x60;embeddedData&#x60; &gt; &gt;Several other reasons include: &gt;- &#x60;transactionData&#x60; or &#x60;embeddedData&#x60; are not JSON objects &gt;- Keys in the &#x60;contact&#x60; object do not adhere to their type restrictions specified.   &lt;!-- theme: info --&gt; &gt;#### Contact deduplication &gt;If your organization has deduplication settings on, then any &#x60;contact&#x60; in the request body that matches an existing contact (in the directory or the specified mailing list) based on those deduplication settings will be merged with said existing contact. &gt; &gt;If the previously existing contact has a transaction associated with it, and a &#x60;contact&#x60; matching by deduplication is included in this API request body, then the existing contact will be updated. Thus, the existing contact will now have two transactions instead of one.  &gt; &gt;Furthermore, any information that was previously specified or not-specified for the contact, if included in this API&#39;s request body, will also be updated for the existing contact.    ## transactionMeta  The &#x60;transactionMeta&#x60; key is only required if &#x60;transactionData&#x60; is supplied in the contact body. If supplied, it is a JSON object, and is constructed as follows:  #### JSON Syntax &#x60;&#x60;&#x60; {\&quot;fields\&quot;: fields,\&quot;batchId\&quot;: batchId} &#x60;&#x60;&#x60;   #### As transactionMeta &#x60;&#x60;&#x60; \&quot;transactionMeta\&quot;: {\&quot;fields\&quot;: [\&quot;field1\&quot;,\&quot;field2\&quot;],\&quot;batchId\&quot;: batchId} &#x60;&#x60;&#x60;   ## fields  **JSON data type**: array Must have a minimum of one item in the array; there is no maximum.  All the items in this array must be JSON strings, or else the API request will return an error response.  ## batchId  **JSON data type**: string This key-value pair is required. The provided value must be a [Create Transaction Batch](./transactionBatches.json/paths/~1directories~1{directoryId}~1transactionbatches/post) ID.  The transaction batch associated with the provided ID must exist. If it does not exist, transactions will not be created and added.  All created transactions will be added to the specified transaction batch. You may paginate through all the [transactions in a batch](./transactionBatches.json/paths/~1directories~1{directoryId}~1transactionbatches~1{batchId}~1transactions/get).   ## contacts  **JSON data type**: array Must have a minimum of one item in the array; there is no maximum.  Each item in the &#x60;contacts&#x60; array for the API request must be a contact.  ## contact  **JSON data type**: object  The **optional** keys are: - &#x60;firstName&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;lastName&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;email&#x60;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string and conform to valid email format) - &#x60;embeddedData&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(see &#x60;embeddedData&#x60; below) - &#x60;language&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;extRef&#x60;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;unsubscribed&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON boolean) - &#x60;transactionData&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(see &#x60;transactionData&#x60; below) &lt;!-- theme: info --&gt;  &gt;### Do Not Use Null &gt;The value &#x60;null&#x60; is not a valid value for these keys. If you do not want to include one of the optional keys, then you must omit it entirely from the JSON.    ## transactionData  **JSON data type**: object  This JSON object (if supplied) must, **at a minimum**, have keys that match at least one of the elements seen in &#x60;fields&#x60; above. If this object has keys that are not specified in &#x60;transactionMeta.fields&#x60;, the contact with the extraneous fields will be counted toward &#x60;contacts.unprocessed&#x60;. Transaction key-value pairs are solely dictated by the items in &#x60;transactionMeta.fields&#x60;.  The values of the keys can be JSON strings, numbers or booleans.  ## embeddedData  **JSON data type**: object  This JSON object must have keys that **do not** match **any of** the elements seen in **fields** above. If this object has keys that are in &#x60;transactionMeta.fields&#x60;, the contact encapsulating this JSON object is added to &#x60;contacts.unprocessed&#x60; array in the API response.  The values of the keys can be JSON strings, numbers or booleans. 
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createTransactionContactsImportRequest  (optional)
     * @return ApiResponse&lt;CreateTransactionContactsImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Import Contacts into Mailing List with Transactions Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTransactionContactsImportResponse> createTransactionContactsImportWithHttpInfo(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateTransactionContactsImportRequest createTransactionContactsImportRequest) throws ApiException {
        okhttp3.Call localVarCall = createTransactionContactsImportValidateBeforeCall(mailingListId, directoryId, createTransactionContactsImportRequest, null);
        Type localVarReturnType = new TypeToken<CreateTransactionContactsImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Transaction Contacts Import (asynchronously)
     * Import contacts into the specified mailing list - contacts can have associated transaction data. &lt;!--From Readme--&gt; To check on the status of your import use [Transaction Contacts Import Status](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts~1{importId}/get) or follow the **url** value nested under the &#x60;tracking&#x60; key in the API response. &lt;!-- theme: danger --&gt;  &gt;#### JSON Body Size Limit &gt;The size of the JSON body accepted by this API call is 5 MB with a maximum of 10,000 contacts per import. &gt; &gt;The API request will return an error if the size of the body or contact count exceed the aforementioned limits.  &lt;!-- theme: danger --&gt; &gt;#### Concurrent Execution Limit &gt;By default, the concurrent execution limit is 25 jobs by default, and an individual brand may only enqueue up to 100 jobs before they are rejected.   &lt;!-- theme: info --&gt; &gt;#### Understanding contacts.unprocessed in the API response &gt;This JSON array has items which are integers. Each integer represents the index of a JSON object in the API request&#39;s contacts array. &gt; &gt;A contact can fail to process for several reasons, some of which are detailed in the below sections: &gt;* &#x60;transactionData&#x60; &gt;* &#x60;embeddedData&#x60; &gt; &gt;Several other reasons include: &gt;- &#x60;transactionData&#x60; or &#x60;embeddedData&#x60; are not JSON objects &gt;- Keys in the &#x60;contact&#x60; object do not adhere to their type restrictions specified.   &lt;!-- theme: info --&gt; &gt;#### Contact deduplication &gt;If your organization has deduplication settings on, then any &#x60;contact&#x60; in the request body that matches an existing contact (in the directory or the specified mailing list) based on those deduplication settings will be merged with said existing contact. &gt; &gt;If the previously existing contact has a transaction associated with it, and a &#x60;contact&#x60; matching by deduplication is included in this API request body, then the existing contact will be updated. Thus, the existing contact will now have two transactions instead of one.  &gt; &gt;Furthermore, any information that was previously specified or not-specified for the contact, if included in this API&#39;s request body, will also be updated for the existing contact.    ## transactionMeta  The &#x60;transactionMeta&#x60; key is only required if &#x60;transactionData&#x60; is supplied in the contact body. If supplied, it is a JSON object, and is constructed as follows:  #### JSON Syntax &#x60;&#x60;&#x60; {\&quot;fields\&quot;: fields,\&quot;batchId\&quot;: batchId} &#x60;&#x60;&#x60;   #### As transactionMeta &#x60;&#x60;&#x60; \&quot;transactionMeta\&quot;: {\&quot;fields\&quot;: [\&quot;field1\&quot;,\&quot;field2\&quot;],\&quot;batchId\&quot;: batchId} &#x60;&#x60;&#x60;   ## fields  **JSON data type**: array Must have a minimum of one item in the array; there is no maximum.  All the items in this array must be JSON strings, or else the API request will return an error response.  ## batchId  **JSON data type**: string This key-value pair is required. The provided value must be a [Create Transaction Batch](./transactionBatches.json/paths/~1directories~1{directoryId}~1transactionbatches/post) ID.  The transaction batch associated with the provided ID must exist. If it does not exist, transactions will not be created and added.  All created transactions will be added to the specified transaction batch. You may paginate through all the [transactions in a batch](./transactionBatches.json/paths/~1directories~1{directoryId}~1transactionbatches~1{batchId}~1transactions/get).   ## contacts  **JSON data type**: array Must have a minimum of one item in the array; there is no maximum.  Each item in the &#x60;contacts&#x60; array for the API request must be a contact.  ## contact  **JSON data type**: object  The **optional** keys are: - &#x60;firstName&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;lastName&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;email&#x60;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string and conform to valid email format) - &#x60;embeddedData&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(see &#x60;embeddedData&#x60; below) - &#x60;language&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;extRef&#x60;   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON string) - &#x60;unsubscribed&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(value must be a JSON boolean) - &#x60;transactionData&#x60;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(see &#x60;transactionData&#x60; below) &lt;!-- theme: info --&gt;  &gt;### Do Not Use Null &gt;The value &#x60;null&#x60; is not a valid value for these keys. If you do not want to include one of the optional keys, then you must omit it entirely from the JSON.    ## transactionData  **JSON data type**: object  This JSON object (if supplied) must, **at a minimum**, have keys that match at least one of the elements seen in &#x60;fields&#x60; above. If this object has keys that are not specified in &#x60;transactionMeta.fields&#x60;, the contact with the extraneous fields will be counted toward &#x60;contacts.unprocessed&#x60;. Transaction key-value pairs are solely dictated by the items in &#x60;transactionMeta.fields&#x60;.  The values of the keys can be JSON strings, numbers or booleans.  ## embeddedData  **JSON data type**: object  This JSON object must have keys that **do not** match **any of** the elements seen in **fields** above. If this object has keys that are in &#x60;transactionMeta.fields&#x60;, the contact encapsulating this JSON object is added to &#x60;contacts.unprocessed&#x60; array in the API response.  The values of the keys can be JSON strings, numbers or booleans. 
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createTransactionContactsImportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Import Contacts into Mailing List with Transactions Response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionContactsImportAsync(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateTransactionContactsImportRequest createTransactionContactsImportRequest, final ApiCallback<CreateTransactionContactsImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionContactsImportValidateBeforeCall(mailingListId, directoryId, createTransactionContactsImportRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTransactionContactsImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportReport
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param importId The ID for the desired transaction contact import. (required)
     * @param skipToken The start position for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportReportResponse </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportReportCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String importId, @javax.annotation.Nullable String skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/imports/api-import/jobs/{importId}/report"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "importId" + "}", localVarApiClient.escapeString(importId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportReportValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String importId, @javax.annotation.Nullable String skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getImportReport(Async)");
        }

        // verify the required parameter 'importId' is set
        if (importId == null) {
            throw new ApiException("Missing the required parameter 'importId' when calling getImportReport(Async)");
        }

        return getImportReportCall(directoryId, importId, skipToken, _callback);

    }

    /**
     * Get Import Report for a Completed Import
     * Get a a generated report detailing the line by line success and failure of an import contacts request.  &lt;!-- theme: danger --&gt; &gt; ## Supported Only on XMD &gt; This API is only supported for users on XM Directory, not Genesis Contacts.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param importId The ID for the desired transaction contact import. (required)
     * @param skipToken The start position for pagination. (optional)
     * @return GetImportReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportReportResponse </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetImportReportResponse getImportReport(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String importId, @javax.annotation.Nullable String skipToken) throws ApiException {
        ApiResponse<GetImportReportResponse> localVarResp = getImportReportWithHttpInfo(directoryId, importId, skipToken);
        return localVarResp.getData();
    }

    /**
     * Get Import Report for a Completed Import
     * Get a a generated report detailing the line by line success and failure of an import contacts request.  &lt;!-- theme: danger --&gt; &gt; ## Supported Only on XMD &gt; This API is only supported for users on XM Directory, not Genesis Contacts.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param importId The ID for the desired transaction contact import. (required)
     * @param skipToken The start position for pagination. (optional)
     * @return ApiResponse&lt;GetImportReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportReportResponse </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetImportReportResponse> getImportReportWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String importId, @javax.annotation.Nullable String skipToken) throws ApiException {
        okhttp3.Call localVarCall = getImportReportValidateBeforeCall(directoryId, importId, skipToken, null);
        Type localVarReturnType = new TypeToken<GetImportReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Import Report for a Completed Import (asynchronously)
     * Get a a generated report detailing the line by line success and failure of an import contacts request.  &lt;!-- theme: danger --&gt; &gt; ## Supported Only on XMD &gt; This API is only supported for users on XM Directory, not Genesis Contacts.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param importId The ID for the desired transaction contact import. (required)
     * @param skipToken The start position for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ImportReportResponse </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportReportAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String importId, @javax.annotation.Nullable String skipToken, final ApiCallback<GetImportReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportReportValidateBeforeCall(directoryId, importId, skipToken, _callback);
        Type localVarReturnType = new TypeToken<GetImportReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionContactsImportStatus
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionContactsImportStatusCall(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts/{importId}"
            .replace("{" + "importId" + "}", localVarApiClient.escapeString(importId.toString()))
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionContactsImportStatusValidateBeforeCall(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importId' is set
        if (importId == null) {
            throw new ApiException("Missing the required parameter 'importId' when calling getTransactionContactsImportStatus(Async)");
        }

        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling getTransactionContactsImportStatus(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getTransactionContactsImportStatus(Async)");
        }

        return getTransactionContactsImportStatusCall(importId, mailingListId, directoryId, _callback);

    }

    /**
     * Get Transaction Contacts Import Status
     * Retrieve the status of the associated import request. &lt;!--From Readme--&gt; This endpoint is a follow up to [Import Mailing List Contacts with Transactions](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts/post).  ## Frequently Asked Questions   &lt;!-- theme: warning --&gt; &gt;### Why are my counts all &#x60;0&#x60; for &#x60;contacts&#x60; and &#x60;transactions&#x60; even though &#x60;the percentComplete&#x60; is &#x60;100&#x60;? &gt;This situation usually means that you provided a &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; that does not exist. &gt; &gt;If the &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; doesn&#39;t represent an existing (non-deleted) collection, you won&#39;t be able to import &#x60;contacts&#x60; or &#x60;transactions&#x60; into it.  
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return GetTransactionContactsImportStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionContactsImportStatusResponse getTransactionContactsImportStatus(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        ApiResponse<GetTransactionContactsImportStatusResponse> localVarResp = getTransactionContactsImportStatusWithHttpInfo(importId, mailingListId, directoryId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Contacts Import Status
     * Retrieve the status of the associated import request. &lt;!--From Readme--&gt; This endpoint is a follow up to [Import Mailing List Contacts with Transactions](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts/post).  ## Frequently Asked Questions   &lt;!-- theme: warning --&gt; &gt;### Why are my counts all &#x60;0&#x60; for &#x60;contacts&#x60; and &#x60;transactions&#x60; even though &#x60;the percentComplete&#x60; is &#x60;100&#x60;? &gt;This situation usually means that you provided a &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; that does not exist. &gt; &gt;If the &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; doesn&#39;t represent an existing (non-deleted) collection, you won&#39;t be able to import &#x60;contacts&#x60; or &#x60;transactions&#x60; into it.  
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return ApiResponse&lt;GetTransactionContactsImportStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionContactsImportStatusResponse> getTransactionContactsImportStatusWithHttpInfo(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        okhttp3.Call localVarCall = getTransactionContactsImportStatusValidateBeforeCall(importId, mailingListId, directoryId, null);
        Type localVarReturnType = new TypeToken<GetTransactionContactsImportStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Contacts Import Status (asynchronously)
     * Retrieve the status of the associated import request. &lt;!--From Readme--&gt; This endpoint is a follow up to [Import Mailing List Contacts with Transactions](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts/post).  ## Frequently Asked Questions   &lt;!-- theme: warning --&gt; &gt;### Why are my counts all &#x60;0&#x60; for &#x60;contacts&#x60; and &#x60;transactions&#x60; even though &#x60;the percentComplete&#x60; is &#x60;100&#x60;? &gt;This situation usually means that you provided a &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; that does not exist. &gt; &gt;If the &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; doesn&#39;t represent an existing (non-deleted) collection, you won&#39;t be able to import &#x60;contacts&#x60; or &#x60;transactions&#x60; into it.  
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Status </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionContactsImportStatusAsync(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback<GetTransactionContactsImportStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionContactsImportStatusValidateBeforeCall(importId, mailingListId, directoryId, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionContactsImportStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionContactsImportSummary
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Summary </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionContactsImportSummaryCall(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/transactioncontacts/{importId}/summary"
            .replace("{" + "importId" + "}", localVarApiClient.escapeString(importId.toString()))
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionContactsImportSummaryValidateBeforeCall(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importId' is set
        if (importId == null) {
            throw new ApiException("Missing the required parameter 'importId' when calling getTransactionContactsImportSummary(Async)");
        }

        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling getTransactionContactsImportSummary(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getTransactionContactsImportSummary(Async)");
        }

        return getTransactionContactsImportSummaryCall(importId, mailingListId, directoryId, _callback);

    }

    /**
     * Get Transaction Contacts Import Summary
     * Retrieve the summary of the associated import request. &lt;!--From Readme--&gt; This endpoint is a follow up to [Import Mailing List Contacts with Transactions](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts/post). This API call can be used to retrieve a full report of a contacts import. The \&quot;contacts\&quot; key returns a short summary of how many contacts were imported, updated, or failed to import. The \&quot;transactions\&quot; key returns the count of transactions that were added. The \&quot;invalidEmails\&quot; key returns an array of malformed emails that must be corrected before re-importing.   ## Frequently Asked Questions   &lt;!-- theme: warning --&gt; &gt;### Why are my counts all 0 for contacts and transactions, even though the percentComplete is 100? &gt;This situation usually indicates that you provided a &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; that does not exist. &gt; &gt;If the &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; doesn&#39;t represent an existing (non-deleted) collection, you won&#39;t be able to import contacts or transactions into it.  
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return GetTransactionContactsImportSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Summary </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionContactsImportSummaryResponse getTransactionContactsImportSummary(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        ApiResponse<GetTransactionContactsImportSummaryResponse> localVarResp = getTransactionContactsImportSummaryWithHttpInfo(importId, mailingListId, directoryId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Contacts Import Summary
     * Retrieve the summary of the associated import request. &lt;!--From Readme--&gt; This endpoint is a follow up to [Import Mailing List Contacts with Transactions](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts/post). This API call can be used to retrieve a full report of a contacts import. The \&quot;contacts\&quot; key returns a short summary of how many contacts were imported, updated, or failed to import. The \&quot;transactions\&quot; key returns the count of transactions that were added. The \&quot;invalidEmails\&quot; key returns an array of malformed emails that must be corrected before re-importing.   ## Frequently Asked Questions   &lt;!-- theme: warning --&gt; &gt;### Why are my counts all 0 for contacts and transactions, even though the percentComplete is 100? &gt;This situation usually indicates that you provided a &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; that does not exist. &gt; &gt;If the &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; doesn&#39;t represent an existing (non-deleted) collection, you won&#39;t be able to import contacts or transactions into it.  
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return ApiResponse&lt;GetTransactionContactsImportSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Summary </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionContactsImportSummaryResponse> getTransactionContactsImportSummaryWithHttpInfo(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        okhttp3.Call localVarCall = getTransactionContactsImportSummaryValidateBeforeCall(importId, mailingListId, directoryId, null);
        Type localVarReturnType = new TypeToken<GetTransactionContactsImportSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Contacts Import Summary (asynchronously)
     * Retrieve the summary of the associated import request. &lt;!--From Readme--&gt; This endpoint is a follow up to [Import Mailing List Contacts with Transactions](./contactImports.json/paths/~1directories~1{directoryId}~1mailinglists~1{mailingListId}~1transactioncontacts/post). This API call can be used to retrieve a full report of a contacts import. The \&quot;contacts\&quot; key returns a short summary of how many contacts were imported, updated, or failed to import. The \&quot;transactions\&quot; key returns the count of transactions that were added. The \&quot;invalidEmails\&quot; key returns an array of malformed emails that must be corrected before re-importing.   ## Frequently Asked Questions   &lt;!-- theme: warning --&gt; &gt;### Why are my counts all 0 for contacts and transactions, even though the percentComplete is 100? &gt;This situation usually indicates that you provided a &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; that does not exist. &gt; &gt;If the &#x60;directoryId&#x60;, &#x60;mailingListId&#x60; or &#x60;transactionBatchId&#x60; doesn&#39;t represent an existing (non-deleted) collection, you won&#39;t be able to import contacts or transactions into it.  
     * @param importId The ID for the desired transaction contact import. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Contacts Import Summary </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionContactsImportSummaryAsync(@javax.annotation.Nonnull String importId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback<GetTransactionContactsImportSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionContactsImportSummaryValidateBeforeCall(importId, mailingListId, directoryId, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionContactsImportSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
