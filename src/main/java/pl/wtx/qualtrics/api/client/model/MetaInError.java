/*
 * EX APIs
 * This is the external API specification for EX endpoints.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.qualtrics.api.client.model.Error;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * MetaInError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class MetaInError {
  public static final String SERIALIZED_NAME_HTTP_STATUS = "httpStatus";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS)
  @javax.annotation.Nonnull
  private String httpStatus;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  @javax.annotation.Nonnull
  private String requestId;

  public static final String SERIALIZED_NAME_NOTICE = "notice";
  @SerializedName(SERIALIZED_NAME_NOTICE)
  @javax.annotation.Nullable
  private String notice;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nonnull
  private Error error;

  public MetaInError() {
  }

  public MetaInError httpStatus(@javax.annotation.Nonnull String httpStatus) {
    this.httpStatus = httpStatus;
    return this;
  }

  /**
   * http status
   * @return httpStatus
   */
  @javax.annotation.Nonnull
  public String getHttpStatus() {
    return httpStatus;
  }

  public void setHttpStatus(@javax.annotation.Nonnull String httpStatus) {
    this.httpStatus = httpStatus;
  }


  public MetaInError requestId(@javax.annotation.Nonnull String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * An identifier of the incoming request.
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(@javax.annotation.Nonnull String requestId) {
    this.requestId = requestId;
  }


  public MetaInError notice(@javax.annotation.Nullable String notice) {
    this.notice = notice;
    return this;
  }

  /**
   * An informational string about the request.
   * @return notice
   */
  @javax.annotation.Nullable
  public String getNotice() {
    return notice;
  }

  public void setNotice(@javax.annotation.Nullable String notice) {
    this.notice = notice;
  }


  public MetaInError error(@javax.annotation.Nonnull Error error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nonnull
  public Error getError() {
    return error;
  }

  public void setError(@javax.annotation.Nonnull Error error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetaInError metaInError = (MetaInError) o;
    return Objects.equals(this.httpStatus, metaInError.httpStatus) &&
        Objects.equals(this.requestId, metaInError.requestId) &&
        Objects.equals(this.notice, metaInError.notice) &&
        Objects.equals(this.error, metaInError.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpStatus, requestId, notice, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetaInError {\n");
    sb.append("    httpStatus: ").append(toIndentedString(httpStatus)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    notice: ").append(toIndentedString(notice)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpStatus");
    openapiFields.add("requestId");
    openapiFields.add("notice");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("httpStatus");
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("error");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetaInError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetaInError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetaInError is not found in the empty JSON string", MetaInError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetaInError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetaInError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetaInError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("httpStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpStatus").toString()));
      }
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("notice") != null && !jsonObj.get("notice").isJsonNull()) && !jsonObj.get("notice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notice").toString()));
      }
      // validate the required field `error`
      Error.validateJsonElement(jsonObj.get("error"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetaInError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetaInError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetaInError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetaInError.class));

       return (TypeAdapter<T>) new TypeAdapter<MetaInError>() {
           @Override
           public void write(JsonWriter out, MetaInError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetaInError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetaInError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetaInError
   * @throws IOException if the JSON string is invalid with respect to MetaInError
   */
  public static MetaInError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetaInError.class);
  }

  /**
   * Convert an instance of MetaInError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

