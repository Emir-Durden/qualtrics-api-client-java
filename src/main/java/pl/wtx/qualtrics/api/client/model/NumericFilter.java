/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * NumericFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class NumericFilter {
  /**
   * Gets or Sets filterType
   */
  @JsonAdapter(FilterTypeEnum.Adapter.class)
  public enum FilterTypeEnum {
    CREATED("created"),
    
    LAST_MODIFIED("lastModified");

    private String value;

    FilterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilterTypeEnum fromValue(String value) {
      for (FilterTypeEnum b : FilterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilterTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilterTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
  @javax.annotation.Nullable
  private FilterTypeEnum filterType;

  /**
   * Gets or Sets comparison
   */
  @JsonAdapter(ComparisonEnum.Adapter.class)
  public enum ComparisonEnum {
    EQ("eq"),
    
    NEQ("neq"),
    
    GT("gt"),
    
    LT("lt"),
    
    GTE("gte"),
    
    LTE("lte");

    private String value;

    ComparisonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparisonEnum fromValue(String value) {
      for (ComparisonEnum b : ComparisonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparisonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparisonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparisonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparisonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComparisonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPARISON = "comparison";
  @SerializedName(SERIALIZED_NAME_COMPARISON)
  @javax.annotation.Nullable
  private ComparisonEnum comparison;

  public NumericFilter() {
  }

  public NumericFilter filterType(@javax.annotation.Nullable FilterTypeEnum filterType) {
    this.filterType = filterType;
    return this;
  }

  /**
   * Get filterType
   * @return filterType
   */
  @javax.annotation.Nullable
  public FilterTypeEnum getFilterType() {
    return filterType;
  }

  public void setFilterType(@javax.annotation.Nullable FilterTypeEnum filterType) {
    this.filterType = filterType;
  }


  public NumericFilter comparison(@javax.annotation.Nullable ComparisonEnum comparison) {
    this.comparison = comparison;
    return this;
  }

  /**
   * Get comparison
   * @return comparison
   */
  @javax.annotation.Nullable
  public ComparisonEnum getComparison() {
    return comparison;
  }

  public void setComparison(@javax.annotation.Nullable ComparisonEnum comparison) {
    this.comparison = comparison;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumericFilter numericFilter = (NumericFilter) o;
    return Objects.equals(this.filterType, numericFilter.filterType) &&
        Objects.equals(this.comparison, numericFilter.comparison);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterType, comparison);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumericFilter {\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    comparison: ").append(toIndentedString(comparison)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterType");
    openapiFields.add("comparison");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NumericFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NumericFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NumericFilter is not found in the empty JSON string", NumericFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NumericFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NumericFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull()) && !jsonObj.get("filterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterType").toString()));
      }
      // validate the optional field `filterType`
      if (jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull()) {
        FilterTypeEnum.validateJsonElement(jsonObj.get("filterType"));
      }
      if ((jsonObj.get("comparison") != null && !jsonObj.get("comparison").isJsonNull()) && !jsonObj.get("comparison").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparison` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparison").toString()));
      }
      // validate the optional field `comparison`
      if (jsonObj.get("comparison") != null && !jsonObj.get("comparison").isJsonNull()) {
        ComparisonEnum.validateJsonElement(jsonObj.get("comparison"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NumericFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NumericFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NumericFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NumericFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<NumericFilter>() {
           @Override
           public void write(JsonWriter out, NumericFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NumericFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NumericFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NumericFilter
   * @throws IOException if the JSON string is invalid with respect to NumericFilter
   */
  public static NumericFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NumericFilter.class);
  }

  /**
   * Convert an instance of NumericFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

