/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client;

import pl.wtx.qualtrics.api.client.invoker.ApiCallback;
import pl.wtx.qualtrics.api.client.invoker.ApiClient;
import pl.wtx.qualtrics.api.client.invoker.ApiException;
import pl.wtx.qualtrics.api.client.invoker.ApiResponse;
import pl.wtx.qualtrics.api.client.invoker.Configuration;
import pl.wtx.qualtrics.api.client.invoker.Pair;
import pl.wtx.qualtrics.api.client.invoker.ProgressRequestBody;
import pl.wtx.qualtrics.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.qualtrics.api.client.model.CreateContactExportRequest;
import pl.wtx.qualtrics.api.client.model.CreateContactExportResponse;
import pl.wtx.qualtrics.api.client.model.DefaultErrorResponse;
import pl.wtx.qualtrics.api.client.model.GetContactExportFileResponse;
import pl.wtx.qualtrics.api.client.model.GetContactExportProgress;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsContactExportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactsContactExportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsContactExportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createContactExport
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createContactExportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Create Contact Export response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactExportCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateContactExportRequest createContactExportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContactExportRequest;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/export-contacts"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactExportValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateContactExportRequest createContactExportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling createContactExport(Async)");
        }

        return createContactExportCall(directoryId, createContactExportRequest, _callback);

    }

    /**
     * Create Contact Export
     * Exports all the contacts within a directory or contact list that match the criteria provided in the filter.   &lt;!-- theme: danger --&gt; &gt; #### Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.  ## Filtering with multiple criteria  The &#x60;filter&#x60; object allows you to refine your request by listing criteria that contacts must meet.   When you need to apply multiple criteria, the &#x60;filter&#x60; object must include two specific components:   - &#x60;conjunction&#x60;: A property that specifies how to combine your filter criteria. Use &#x60;and&#x60; to include only contacts that meet all conditions or use &#x60;or&#x60; to include contacts that meet any condition. - &#x60;contactFilterExpressions&#x60;: An array of objects, each defining a single filter criterion.  ### Example payload for applying multiple filters  This setup ensures that only contacts with a non-empty email field and a last modification date later than September 26, 2023, are included:  &#x60;&#x60;&#x60;json {   \&quot;filter\&quot;: {     \&quot;conjunction\&quot;: \&quot;and\&quot;,     \&quot;contactFilterExpressions\&quot;: [       {         \&quot;filterType\&quot;: \&quot;infoFieldState\&quot;,         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;comparison\&quot;: \&quot;notEmpty\&quot;       },       {         \&quot;filterType\&quot;: \&quot;lastModified\&quot;,         \&quot;comparison\&quot;: \&quot;gt\&quot;,         \&quot;value\&quot;: \&quot;2023-09-26 00:00:00\&quot;       }     ]   } } &#x60;&#x60;&#x60; 
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createContactExportRequest  (optional)
     * @return CreateContactExportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Create Contact Export response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CreateContactExportResponse createContactExport(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateContactExportRequest createContactExportRequest) throws ApiException {
        ApiResponse<CreateContactExportResponse> localVarResp = createContactExportWithHttpInfo(directoryId, createContactExportRequest);
        return localVarResp.getData();
    }

    /**
     * Create Contact Export
     * Exports all the contacts within a directory or contact list that match the criteria provided in the filter.   &lt;!-- theme: danger --&gt; &gt; #### Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.  ## Filtering with multiple criteria  The &#x60;filter&#x60; object allows you to refine your request by listing criteria that contacts must meet.   When you need to apply multiple criteria, the &#x60;filter&#x60; object must include two specific components:   - &#x60;conjunction&#x60;: A property that specifies how to combine your filter criteria. Use &#x60;and&#x60; to include only contacts that meet all conditions or use &#x60;or&#x60; to include contacts that meet any condition. - &#x60;contactFilterExpressions&#x60;: An array of objects, each defining a single filter criterion.  ### Example payload for applying multiple filters  This setup ensures that only contacts with a non-empty email field and a last modification date later than September 26, 2023, are included:  &#x60;&#x60;&#x60;json {   \&quot;filter\&quot;: {     \&quot;conjunction\&quot;: \&quot;and\&quot;,     \&quot;contactFilterExpressions\&quot;: [       {         \&quot;filterType\&quot;: \&quot;infoFieldState\&quot;,         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;comparison\&quot;: \&quot;notEmpty\&quot;       },       {         \&quot;filterType\&quot;: \&quot;lastModified\&quot;,         \&quot;comparison\&quot;: \&quot;gt\&quot;,         \&quot;value\&quot;: \&quot;2023-09-26 00:00:00\&quot;       }     ]   } } &#x60;&#x60;&#x60; 
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createContactExportRequest  (optional)
     * @return ApiResponse&lt;CreateContactExportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Create Contact Export response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateContactExportResponse> createContactExportWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateContactExportRequest createContactExportRequest) throws ApiException {
        okhttp3.Call localVarCall = createContactExportValidateBeforeCall(directoryId, createContactExportRequest, null);
        Type localVarReturnType = new TypeToken<CreateContactExportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Contact Export (asynchronously)
     * Exports all the contacts within a directory or contact list that match the criteria provided in the filter.   &lt;!-- theme: danger --&gt; &gt; #### Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.  ## Filtering with multiple criteria  The &#x60;filter&#x60; object allows you to refine your request by listing criteria that contacts must meet.   When you need to apply multiple criteria, the &#x60;filter&#x60; object must include two specific components:   - &#x60;conjunction&#x60;: A property that specifies how to combine your filter criteria. Use &#x60;and&#x60; to include only contacts that meet all conditions or use &#x60;or&#x60; to include contacts that meet any condition. - &#x60;contactFilterExpressions&#x60;: An array of objects, each defining a single filter criterion.  ### Example payload for applying multiple filters  This setup ensures that only contacts with a non-empty email field and a last modification date later than September 26, 2023, are included:  &#x60;&#x60;&#x60;json {   \&quot;filter\&quot;: {     \&quot;conjunction\&quot;: \&quot;and\&quot;,     \&quot;contactFilterExpressions\&quot;: [       {         \&quot;filterType\&quot;: \&quot;infoFieldState\&quot;,         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;comparison\&quot;: \&quot;notEmpty\&quot;       },       {         \&quot;filterType\&quot;: \&quot;lastModified\&quot;,         \&quot;comparison\&quot;: \&quot;gt\&quot;,         \&quot;value\&quot;: \&quot;2023-09-26 00:00:00\&quot;       }     ]   } } &#x60;&#x60;&#x60; 
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createContactExportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Create Contact Export response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactExportAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateContactExportRequest createContactExportRequest, final ApiCallback<CreateContactExportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactExportValidateBeforeCall(directoryId, createContactExportRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateContactExportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactExportFile
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param fileId The ID for the file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contact export file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactExportFileCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/export-contacts/{fileId}/file"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactExportFileValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getContactExportFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getContactExportFile(Async)");
        }

        return getContactExportFileCall(directoryId, fileId, _callback);

    }

    /**
     * Get Contact Export File
     * After the contact export has finished being processed, this API can be used to download the file   &lt;!-- theme: danger --&gt; &gt; ## Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param fileId The ID for the file (required)
     * @return GetContactExportFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contact export file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetContactExportFileResponse getContactExportFile(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String fileId) throws ApiException {
        ApiResponse<GetContactExportFileResponse> localVarResp = getContactExportFileWithHttpInfo(directoryId, fileId);
        return localVarResp.getData();
    }

    /**
     * Get Contact Export File
     * After the contact export has finished being processed, this API can be used to download the file   &lt;!-- theme: danger --&gt; &gt; ## Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param fileId The ID for the file (required)
     * @return ApiResponse&lt;GetContactExportFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contact export file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetContactExportFileResponse> getContactExportFileWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String fileId) throws ApiException {
        okhttp3.Call localVarCall = getContactExportFileValidateBeforeCall(directoryId, fileId, null);
        Type localVarReturnType = new TypeToken<GetContactExportFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Contact Export File (asynchronously)
     * After the contact export has finished being processed, this API can be used to download the file   &lt;!-- theme: danger --&gt; &gt; ## Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param fileId The ID for the file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The contact export file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactExportFileAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String fileId, final ApiCallback<GetContactExportFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactExportFileValidateBeforeCall(directoryId, fileId, _callback);
        Type localVarReturnType = new TypeToken<GetContactExportFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactExportProgress
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param progressId The ID for the progress query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact Export Progress response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactExportProgressCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String progressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/export-contacts/{progressId}/status"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "progressId" + "}", localVarApiClient.escapeString(progressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactExportProgressValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String progressId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getContactExportProgress(Async)");
        }

        // verify the required parameter 'progressId' is set
        if (progressId == null) {
            throw new ApiException("Missing the required parameter 'progressId' when calling getContactExportProgress(Async)");
        }

        return getContactExportProgressCall(directoryId, progressId, _callback);

    }

    /**
     * Get Contact Export Progress Status
     * Reports the current status of the contact export   &lt;!-- theme: danger --&gt; &gt; ## Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param progressId The ID for the progress query (required)
     * @return GetContactExportProgress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact Export Progress response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetContactExportProgress getContactExportProgress(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String progressId) throws ApiException {
        ApiResponse<GetContactExportProgress> localVarResp = getContactExportProgressWithHttpInfo(directoryId, progressId);
        return localVarResp.getData();
    }

    /**
     * Get Contact Export Progress Status
     * Reports the current status of the contact export   &lt;!-- theme: danger --&gt; &gt; ## Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param progressId The ID for the progress query (required)
     * @return ApiResponse&lt;GetContactExportProgress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact Export Progress response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetContactExportProgress> getContactExportProgressWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String progressId) throws ApiException {
        okhttp3.Call localVarCall = getContactExportProgressValidateBeforeCall(directoryId, progressId, null);
        Type localVarReturnType = new TypeToken<GetContactExportProgress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Contact Export Progress Status (asynchronously)
     * Reports the current status of the contact export   &lt;!-- theme: danger --&gt; &gt; ## Private Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param progressId The ID for the progress query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact Export Progress response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactExportProgressAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable String progressId, final ApiCallback<GetContactExportProgress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactExportProgressValidateBeforeCall(directoryId, progressId, _callback);
        Type localVarReturnType = new TypeToken<GetContactExportProgress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
