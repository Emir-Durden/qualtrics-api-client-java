/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.qualtrics.api.client.model.SegmentMembershipDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * ElementsInner1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ElementsInner1 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  @javax.annotation.Nullable
  private String creationDate;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  @javax.annotation.Nullable
  private String lastModified;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nullable
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nullable
  private String lastName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nullable
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EXTERNAL_DATA_REFERENCE = "externalDataReference";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DATA_REFERENCE)
  @javax.annotation.Nullable
  private String externalDataReference;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_UNSUBSCRIBED = "unsubscribed";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED)
  @javax.annotation.Nullable
  private Boolean unsubscribed;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE_DATE = "unsubscribeDate";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE_DATE)
  @javax.annotation.Nullable
  private String unsubscribeDate;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  @javax.annotation.Nullable
  private Map<String, String> stats;

  public static final String SERIALIZED_NAME_EMBEDDED_DATA = "embeddedData";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_DATA)
  @javax.annotation.Nullable
  private Map<String, String> embeddedData = new HashMap<>();

  public static final String SERIALIZED_NAME_SEGMENT_MEMBERSHIP = "segmentMembership";
  @SerializedName(SERIALIZED_NAME_SEGMENT_MEMBERSHIP)
  @javax.annotation.Nullable
  private Map<String, SegmentMembershipDetails> segmentMembership = new HashMap<>();

  public ElementsInner1() {
  }

  public ElementsInner1 id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * 
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ElementsInner1 creationDate(@javax.annotation.Nullable String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(@javax.annotation.Nullable String creationDate) {
    this.creationDate = creationDate;
  }


  public ElementsInner1 lastModified(@javax.annotation.Nullable String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(@javax.annotation.Nullable String lastModified) {
    this.lastModified = lastModified;
  }


  public ElementsInner1 firstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * THe contact&#39;s first name.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
  }


  public ElementsInner1 lastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The contact&#39;s last name.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
  }


  public ElementsInner1 email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * The contact&#39;s email address.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public ElementsInner1 phoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The contact&#39;s phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ElementsInner1 externalDataReference(@javax.annotation.Nullable String externalDataReference) {
    this.externalDataReference = externalDataReference;
    return this;
  }

  /**
   * External reference information for the contact.
   * @return externalDataReference
   */
  @javax.annotation.Nullable
  public String getExternalDataReference() {
    return externalDataReference;
  }

  public void setExternalDataReference(@javax.annotation.Nullable String externalDataReference) {
    this.externalDataReference = externalDataReference;
  }


  public ElementsInner1 language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * The contact&#39;s preferred language.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public ElementsInner1 unsubscribed(@javax.annotation.Nullable Boolean unsubscribed) {
    this.unsubscribed = unsubscribed;
    return this;
  }

  /**
   * Whether the contact is unsubscribed.
   * @return unsubscribed
   */
  @javax.annotation.Nullable
  public Boolean getUnsubscribed() {
    return unsubscribed;
  }

  public void setUnsubscribed(@javax.annotation.Nullable Boolean unsubscribed) {
    this.unsubscribed = unsubscribed;
  }


  public ElementsInner1 unsubscribeDate(@javax.annotation.Nullable String unsubscribeDate) {
    this.unsubscribeDate = unsubscribeDate;
    return this;
  }

  /**
   * The date the contact opted out of this mailing list. Is set to null if the user has not opted out.
   * @return unsubscribeDate
   */
  @javax.annotation.Nullable
  public String getUnsubscribeDate() {
    return unsubscribeDate;
  }

  public void setUnsubscribeDate(@javax.annotation.Nullable String unsubscribeDate) {
    this.unsubscribeDate = unsubscribeDate;
  }


  public ElementsInner1 stats(@javax.annotation.Nullable Map<String, String> stats) {
    this.stats = stats;
    return this;
  }

  public ElementsInner1 putStatsItem(String key, String statsItem) {
    if (this.stats == null) {
      this.stats = new HashMap<>();
    }
    this.stats.put(key, statsItem);
    return this;
  }

  /**
   * Statistics relevant to the request. All Month Stats are deprecated and no longer updated.
   * @return stats
   */
  @javax.annotation.Nullable
  public Map<String, String> getStats() {
    return stats;
  }

  public void setStats(@javax.annotation.Nullable Map<String, String> stats) {
    this.stats = stats;
  }


  public ElementsInner1 embeddedData(@javax.annotation.Nullable Map<String, String> embeddedData) {
    this.embeddedData = embeddedData;
    return this;
  }

  public ElementsInner1 putEmbeddedDataItem(String key, String embeddedDataItem) {
    if (this.embeddedData == null) {
      this.embeddedData = new HashMap<>();
    }
    this.embeddedData.put(key, embeddedDataItem);
    return this;
  }

  /**
   * Embedded data for the contact.
   * @return embeddedData
   */
  @javax.annotation.Nullable
  public Map<String, String> getEmbeddedData() {
    return embeddedData;
  }

  public void setEmbeddedData(@javax.annotation.Nullable Map<String, String> embeddedData) {
    this.embeddedData = embeddedData;
  }


  public ElementsInner1 segmentMembership(@javax.annotation.Nullable Map<String, SegmentMembershipDetails> segmentMembership) {
    this.segmentMembership = segmentMembership;
    return this;
  }

  public ElementsInner1 putSegmentMembershipItem(String key, SegmentMembershipDetails segmentMembershipItem) {
    if (this.segmentMembership == null) {
      this.segmentMembership = new HashMap<>();
    }
    this.segmentMembership.put(key, segmentMembershipItem);
    return this;
  }

  /**
   * A map whose keys are segment IDs and whose values are objects detailing the contact&#39;s membership to the corresponding segment.
   * @return segmentMembership
   */
  @javax.annotation.Nullable
  public Map<String, SegmentMembershipDetails> getSegmentMembership() {
    return segmentMembership;
  }

  public void setSegmentMembership(@javax.annotation.Nullable Map<String, SegmentMembershipDetails> segmentMembership) {
    this.segmentMembership = segmentMembership;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElementsInner1 elementsInner1 = (ElementsInner1) o;
    return Objects.equals(this.id, elementsInner1.id) &&
        Objects.equals(this.creationDate, elementsInner1.creationDate) &&
        Objects.equals(this.lastModified, elementsInner1.lastModified) &&
        Objects.equals(this.firstName, elementsInner1.firstName) &&
        Objects.equals(this.lastName, elementsInner1.lastName) &&
        Objects.equals(this.email, elementsInner1.email) &&
        Objects.equals(this.phoneNumber, elementsInner1.phoneNumber) &&
        Objects.equals(this.externalDataReference, elementsInner1.externalDataReference) &&
        Objects.equals(this.language, elementsInner1.language) &&
        Objects.equals(this.unsubscribed, elementsInner1.unsubscribed) &&
        Objects.equals(this.unsubscribeDate, elementsInner1.unsubscribeDate) &&
        Objects.equals(this.stats, elementsInner1.stats) &&
        Objects.equals(this.embeddedData, elementsInner1.embeddedData) &&
        Objects.equals(this.segmentMembership, elementsInner1.segmentMembership);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, creationDate, lastModified, firstName, lastName, email, phoneNumber, externalDataReference, language, unsubscribed, unsubscribeDate, stats, embeddedData, segmentMembership);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElementsInner1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    externalDataReference: ").append(toIndentedString(externalDataReference)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    unsubscribeDate: ").append(toIndentedString(unsubscribeDate)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    embeddedData: ").append(toIndentedString(embeddedData)).append("\n");
    sb.append("    segmentMembership: ").append(toIndentedString(segmentMembership)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("creationDate");
    openapiFields.add("lastModified");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("email");
    openapiFields.add("phoneNumber");
    openapiFields.add("externalDataReference");
    openapiFields.add("language");
    openapiFields.add("unsubscribed");
    openapiFields.add("unsubscribeDate");
    openapiFields.add("stats");
    openapiFields.add("embeddedData");
    openapiFields.add("segmentMembership");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElementsInner1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElementsInner1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElementsInner1 is not found in the empty JSON string", ElementsInner1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElementsInner1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElementsInner1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) && !jsonObj.get("lastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModified").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("externalDataReference") != null && !jsonObj.get("externalDataReference").isJsonNull()) && !jsonObj.get("externalDataReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDataReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDataReference").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("unsubscribeDate") != null && !jsonObj.get("unsubscribeDate").isJsonNull()) && !jsonObj.get("unsubscribeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsubscribeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsubscribeDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElementsInner1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElementsInner1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElementsInner1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElementsInner1.class));

       return (TypeAdapter<T>) new TypeAdapter<ElementsInner1>() {
           @Override
           public void write(JsonWriter out, ElementsInner1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElementsInner1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElementsInner1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElementsInner1
   * @throws IOException if the JSON string is invalid with respect to ElementsInner1
   */
  public static ElementsInner1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElementsInner1.class);
  }

  /**
   * Convert an instance of ElementsInner1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

