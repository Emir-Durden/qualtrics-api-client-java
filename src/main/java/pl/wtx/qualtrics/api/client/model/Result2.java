/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.qualtrics.api.client.model.Result2Contacts;
import pl.wtx.qualtrics.api.client.model.Result2Transactions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * Result2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Result2 {
  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  @javax.annotation.Nullable
  private Float percentComplete;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  @javax.annotation.Nullable
  private Result2Contacts contacts;

  public static final String SERIALIZED_NAME_INVALID_EMAILS = "invalidEmails";
  @SerializedName(SERIALIZED_NAME_INVALID_EMAILS)
  @javax.annotation.Nullable
  private List<String> invalidEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  @javax.annotation.Nullable
  private Result2Transactions transactions;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public Result2() {
  }

  public Result2 percentComplete(@javax.annotation.Nullable Float percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Get percentComplete
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Float getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(@javax.annotation.Nullable Float percentComplete) {
    this.percentComplete = percentComplete;
  }


  public Result2 contacts(@javax.annotation.Nullable Result2Contacts contacts) {
    this.contacts = contacts;
    return this;
  }

  /**
   * Get contacts
   * @return contacts
   */
  @javax.annotation.Nullable
  public Result2Contacts getContacts() {
    return contacts;
  }

  public void setContacts(@javax.annotation.Nullable Result2Contacts contacts) {
    this.contacts = contacts;
  }


  public Result2 invalidEmails(@javax.annotation.Nullable List<String> invalidEmails) {
    this.invalidEmails = invalidEmails;
    return this;
  }

  public Result2 addInvalidEmailsItem(String invalidEmailsItem) {
    if (this.invalidEmails == null) {
      this.invalidEmails = new ArrayList<>();
    }
    this.invalidEmails.add(invalidEmailsItem);
    return this;
  }

  /**
   * Invalid email addresses in the import job.
   * @return invalidEmails
   */
  @javax.annotation.Nullable
  public List<String> getInvalidEmails() {
    return invalidEmails;
  }

  public void setInvalidEmails(@javax.annotation.Nullable List<String> invalidEmails) {
    this.invalidEmails = invalidEmails;
  }


  public Result2 transactions(@javax.annotation.Nullable Result2Transactions transactions) {
    this.transactions = transactions;
    return this;
  }

  /**
   * Get transactions
   * @return transactions
   */
  @javax.annotation.Nullable
  public Result2Transactions getTransactions() {
    return transactions;
  }

  public void setTransactions(@javax.annotation.Nullable Result2Transactions transactions) {
    this.transactions = transactions;
  }


  public Result2 status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result2 result2 = (Result2) o;
    return Objects.equals(this.percentComplete, result2.percentComplete) &&
        Objects.equals(this.contacts, result2.contacts) &&
        Objects.equals(this.invalidEmails, result2.invalidEmails) &&
        Objects.equals(this.transactions, result2.transactions) &&
        Objects.equals(this.status, result2.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentComplete, contacts, invalidEmails, transactions, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result2 {\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    invalidEmails: ").append(toIndentedString(invalidEmails)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("percentComplete");
    openapiFields.add("contacts");
    openapiFields.add("invalidEmails");
    openapiFields.add("transactions");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Result2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Result2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Result2 is not found in the empty JSON string", Result2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Result2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Result2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contacts`
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        Result2Contacts.validateJsonElement(jsonObj.get("contacts"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("invalidEmails") != null && !jsonObj.get("invalidEmails").isJsonNull() && !jsonObj.get("invalidEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidEmails` to be an array in the JSON string but got `%s`", jsonObj.get("invalidEmails").toString()));
      }
      // validate the optional field `transactions`
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        Result2Transactions.validateJsonElement(jsonObj.get("transactions"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Result2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Result2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Result2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Result2.class));

       return (TypeAdapter<T>) new TypeAdapter<Result2>() {
           @Override
           public void write(JsonWriter out, Result2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Result2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Result2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Result2
   * @throws IOException if the JSON string is invalid with respect to Result2
   */
  public static Result2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Result2.class);
  }

  /**
   * Convert an instance of Result2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

