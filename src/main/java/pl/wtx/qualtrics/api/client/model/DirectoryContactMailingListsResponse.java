/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * Mailing list memberships of a directory contact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class DirectoryContactMailingListsResponse {
  public static final String SERIALIZED_NAME_LOOKUP_ID = "lookupId";
  @SerializedName(SERIALIZED_NAME_LOOKUP_ID)
  @javax.annotation.Nonnull
  private String lookupId;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  @javax.annotation.Nonnull
  private String groupName;

  public static final String SERIALIZED_NAME_GROUP_UNSUBSCRIBED = "groupUnsubscribed";
  @SerializedName(SERIALIZED_NAME_GROUP_UNSUBSCRIBED)
  @javax.annotation.Nonnull
  private Boolean groupUnsubscribed;

  public static final String SERIALIZED_NAME_GROUP_UNSUBSCRIBE_DATE = "groupUnsubscribeDate";
  @SerializedName(SERIALIZED_NAME_GROUP_UNSUBSCRIBE_DATE)
  @javax.annotation.Nullable
  private BigDecimal groupUnsubscribeDate;

  public static final String SERIALIZED_NAME_GROUP_OWNER_ID = "groupOwnerId";
  @SerializedName(SERIALIZED_NAME_GROUP_OWNER_ID)
  @javax.annotation.Nonnull
  private String groupOwnerId;

  public DirectoryContactMailingListsResponse() {
  }

  public DirectoryContactMailingListsResponse lookupId(@javax.annotation.Nonnull String lookupId) {
    this.lookupId = lookupId;
    return this;
  }

  /**
   * Get lookupId
   * @return lookupId
   */
  @javax.annotation.Nonnull
  public String getLookupId() {
    return lookupId;
  }

  public void setLookupId(@javax.annotation.Nonnull String lookupId) {
    this.lookupId = lookupId;
  }


  public DirectoryContactMailingListsResponse groupName(@javax.annotation.Nonnull String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Get groupName
   * @return groupName
   */
  @javax.annotation.Nonnull
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(@javax.annotation.Nonnull String groupName) {
    this.groupName = groupName;
  }


  public DirectoryContactMailingListsResponse groupUnsubscribed(@javax.annotation.Nonnull Boolean groupUnsubscribed) {
    this.groupUnsubscribed = groupUnsubscribed;
    return this;
  }

  /**
   * Get groupUnsubscribed
   * @return groupUnsubscribed
   */
  @javax.annotation.Nonnull
  public Boolean getGroupUnsubscribed() {
    return groupUnsubscribed;
  }

  public void setGroupUnsubscribed(@javax.annotation.Nonnull Boolean groupUnsubscribed) {
    this.groupUnsubscribed = groupUnsubscribed;
  }


  public DirectoryContactMailingListsResponse groupUnsubscribeDate(@javax.annotation.Nullable BigDecimal groupUnsubscribeDate) {
    this.groupUnsubscribeDate = groupUnsubscribeDate;
    return this;
  }

  /**
   * Get groupUnsubscribeDate
   * @return groupUnsubscribeDate
   */
  @javax.annotation.Nullable
  public BigDecimal getGroupUnsubscribeDate() {
    return groupUnsubscribeDate;
  }

  public void setGroupUnsubscribeDate(@javax.annotation.Nullable BigDecimal groupUnsubscribeDate) {
    this.groupUnsubscribeDate = groupUnsubscribeDate;
  }


  public DirectoryContactMailingListsResponse groupOwnerId(@javax.annotation.Nonnull String groupOwnerId) {
    this.groupOwnerId = groupOwnerId;
    return this;
  }

  /**
   * Get groupOwnerId
   * @return groupOwnerId
   */
  @javax.annotation.Nonnull
  public String getGroupOwnerId() {
    return groupOwnerId;
  }

  public void setGroupOwnerId(@javax.annotation.Nonnull String groupOwnerId) {
    this.groupOwnerId = groupOwnerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryContactMailingListsResponse directoryContactMailingListsResponse = (DirectoryContactMailingListsResponse) o;
    return Objects.equals(this.lookupId, directoryContactMailingListsResponse.lookupId) &&
        Objects.equals(this.groupName, directoryContactMailingListsResponse.groupName) &&
        Objects.equals(this.groupUnsubscribed, directoryContactMailingListsResponse.groupUnsubscribed) &&
        Objects.equals(this.groupUnsubscribeDate, directoryContactMailingListsResponse.groupUnsubscribeDate) &&
        Objects.equals(this.groupOwnerId, directoryContactMailingListsResponse.groupOwnerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lookupId, groupName, groupUnsubscribed, groupUnsubscribeDate, groupOwnerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryContactMailingListsResponse {\n");
    sb.append("    lookupId: ").append(toIndentedString(lookupId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    groupUnsubscribed: ").append(toIndentedString(groupUnsubscribed)).append("\n");
    sb.append("    groupUnsubscribeDate: ").append(toIndentedString(groupUnsubscribeDate)).append("\n");
    sb.append("    groupOwnerId: ").append(toIndentedString(groupOwnerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lookupId");
    openapiFields.add("groupName");
    openapiFields.add("groupUnsubscribed");
    openapiFields.add("groupUnsubscribeDate");
    openapiFields.add("groupOwnerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lookupId");
    openapiRequiredFields.add("groupName");
    openapiRequiredFields.add("groupUnsubscribed");
    openapiRequiredFields.add("groupUnsubscribeDate");
    openapiRequiredFields.add("groupOwnerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectoryContactMailingListsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectoryContactMailingListsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectoryContactMailingListsResponse is not found in the empty JSON string", DirectoryContactMailingListsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectoryContactMailingListsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectoryContactMailingListsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DirectoryContactMailingListsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lookupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookupId").toString()));
      }
      if (!jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if (!jsonObj.get("groupOwnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupOwnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupOwnerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectoryContactMailingListsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectoryContactMailingListsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectoryContactMailingListsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectoryContactMailingListsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectoryContactMailingListsResponse>() {
           @Override
           public void write(JsonWriter out, DirectoryContactMailingListsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectoryContactMailingListsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectoryContactMailingListsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectoryContactMailingListsResponse
   * @throws IOException if the JSON string is invalid with respect to DirectoryContactMailingListsResponse
   */
  public static DirectoryContactMailingListsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectoryContactMailingListsResponse.class);
  }

  /**
   * Convert an instance of DirectoryContactMailingListsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

