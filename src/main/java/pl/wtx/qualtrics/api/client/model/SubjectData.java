/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * SubjectData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class SubjectData {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_NOMINATIONS_SENT = "nominationsSent";
  @SerializedName(SERIALIZED_NAME_NOMINATIONS_SENT)
  @javax.annotation.Nullable
  private String nominationsSent;

  public static final String SERIALIZED_NAME_EVALUATIONS_RECEIVED = "evaluationsReceived";
  @SerializedName(SERIALIZED_NAME_EVALUATIONS_RECEIVED)
  @javax.annotation.Nullable
  private String evaluationsReceived;

  public static final String SERIALIZED_NAME_NOMINATIONS_RECEIVED = "nominationsReceived";
  @SerializedName(SERIALIZED_NAME_NOMINATIONS_RECEIVED)
  @javax.annotation.Nullable
  private String nominationsReceived;

  public static final String SERIALIZED_NAME_COMPLETED_EVALUATIONS = "completedEvaluations";
  @SerializedName(SERIALIZED_NAME_COMPLETED_EVALUATIONS)
  @javax.annotation.Nullable
  private String completedEvaluations;

  public static final String SERIALIZED_NAME_SELF_EVALUATION_COMPLETE = "selfEvaluationComplete";
  @SerializedName(SERIALIZED_NAME_SELF_EVALUATION_COMPLETE)
  @javax.annotation.Nullable
  private String selfEvaluationComplete;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  @javax.annotation.Nullable
  private String external;

  public static final String SERIALIZED_NAME_REPORT_AVAILABLE = "reportAvailable";
  @SerializedName(SERIALIZED_NAME_REPORT_AVAILABLE)
  @javax.annotation.Nullable
  private String reportAvailable;

  public SubjectData() {
  }

  public SubjectData status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public SubjectData nominationsSent(@javax.annotation.Nullable String nominationsSent) {
    this.nominationsSent = nominationsSent;
    return this;
  }

  /**
   * Get nominationsSent
   * @return nominationsSent
   */
  @javax.annotation.Nullable
  public String getNominationsSent() {
    return nominationsSent;
  }

  public void setNominationsSent(@javax.annotation.Nullable String nominationsSent) {
    this.nominationsSent = nominationsSent;
  }


  public SubjectData evaluationsReceived(@javax.annotation.Nullable String evaluationsReceived) {
    this.evaluationsReceived = evaluationsReceived;
    return this;
  }

  /**
   * Get evaluationsReceived
   * @return evaluationsReceived
   */
  @javax.annotation.Nullable
  public String getEvaluationsReceived() {
    return evaluationsReceived;
  }

  public void setEvaluationsReceived(@javax.annotation.Nullable String evaluationsReceived) {
    this.evaluationsReceived = evaluationsReceived;
  }


  public SubjectData nominationsReceived(@javax.annotation.Nullable String nominationsReceived) {
    this.nominationsReceived = nominationsReceived;
    return this;
  }

  /**
   * Get nominationsReceived
   * @return nominationsReceived
   */
  @javax.annotation.Nullable
  public String getNominationsReceived() {
    return nominationsReceived;
  }

  public void setNominationsReceived(@javax.annotation.Nullable String nominationsReceived) {
    this.nominationsReceived = nominationsReceived;
  }


  public SubjectData completedEvaluations(@javax.annotation.Nullable String completedEvaluations) {
    this.completedEvaluations = completedEvaluations;
    return this;
  }

  /**
   * Get completedEvaluations
   * @return completedEvaluations
   */
  @javax.annotation.Nullable
  public String getCompletedEvaluations() {
    return completedEvaluations;
  }

  public void setCompletedEvaluations(@javax.annotation.Nullable String completedEvaluations) {
    this.completedEvaluations = completedEvaluations;
  }


  public SubjectData selfEvaluationComplete(@javax.annotation.Nullable String selfEvaluationComplete) {
    this.selfEvaluationComplete = selfEvaluationComplete;
    return this;
  }

  /**
   * Get selfEvaluationComplete
   * @return selfEvaluationComplete
   */
  @javax.annotation.Nullable
  public String getSelfEvaluationComplete() {
    return selfEvaluationComplete;
  }

  public void setSelfEvaluationComplete(@javax.annotation.Nullable String selfEvaluationComplete) {
    this.selfEvaluationComplete = selfEvaluationComplete;
  }


  public SubjectData external(@javax.annotation.Nullable String external) {
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @javax.annotation.Nullable
  public String getExternal() {
    return external;
  }

  public void setExternal(@javax.annotation.Nullable String external) {
    this.external = external;
  }


  public SubjectData reportAvailable(@javax.annotation.Nullable String reportAvailable) {
    this.reportAvailable = reportAvailable;
    return this;
  }

  /**
   * Get reportAvailable
   * @return reportAvailable
   */
  @javax.annotation.Nullable
  public String getReportAvailable() {
    return reportAvailable;
  }

  public void setReportAvailable(@javax.annotation.Nullable String reportAvailable) {
    this.reportAvailable = reportAvailable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubjectData subjectData = (SubjectData) o;
    return Objects.equals(this.status, subjectData.status) &&
        Objects.equals(this.nominationsSent, subjectData.nominationsSent) &&
        Objects.equals(this.evaluationsReceived, subjectData.evaluationsReceived) &&
        Objects.equals(this.nominationsReceived, subjectData.nominationsReceived) &&
        Objects.equals(this.completedEvaluations, subjectData.completedEvaluations) &&
        Objects.equals(this.selfEvaluationComplete, subjectData.selfEvaluationComplete) &&
        Objects.equals(this.external, subjectData.external) &&
        Objects.equals(this.reportAvailable, subjectData.reportAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, nominationsSent, evaluationsReceived, nominationsReceived, completedEvaluations, selfEvaluationComplete, external, reportAvailable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubjectData {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    nominationsSent: ").append(toIndentedString(nominationsSent)).append("\n");
    sb.append("    evaluationsReceived: ").append(toIndentedString(evaluationsReceived)).append("\n");
    sb.append("    nominationsReceived: ").append(toIndentedString(nominationsReceived)).append("\n");
    sb.append("    completedEvaluations: ").append(toIndentedString(completedEvaluations)).append("\n");
    sb.append("    selfEvaluationComplete: ").append(toIndentedString(selfEvaluationComplete)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    reportAvailable: ").append(toIndentedString(reportAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("nominationsSent");
    openapiFields.add("evaluationsReceived");
    openapiFields.add("nominationsReceived");
    openapiFields.add("completedEvaluations");
    openapiFields.add("selfEvaluationComplete");
    openapiFields.add("external");
    openapiFields.add("reportAvailable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubjectData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubjectData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubjectData is not found in the empty JSON string", SubjectData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubjectData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubjectData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("nominationsSent") != null && !jsonObj.get("nominationsSent").isJsonNull()) && !jsonObj.get("nominationsSent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nominationsSent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nominationsSent").toString()));
      }
      if ((jsonObj.get("evaluationsReceived") != null && !jsonObj.get("evaluationsReceived").isJsonNull()) && !jsonObj.get("evaluationsReceived").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationsReceived` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationsReceived").toString()));
      }
      if ((jsonObj.get("nominationsReceived") != null && !jsonObj.get("nominationsReceived").isJsonNull()) && !jsonObj.get("nominationsReceived").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nominationsReceived` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nominationsReceived").toString()));
      }
      if ((jsonObj.get("completedEvaluations") != null && !jsonObj.get("completedEvaluations").isJsonNull()) && !jsonObj.get("completedEvaluations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedEvaluations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedEvaluations").toString()));
      }
      if ((jsonObj.get("selfEvaluationComplete") != null && !jsonObj.get("selfEvaluationComplete").isJsonNull()) && !jsonObj.get("selfEvaluationComplete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfEvaluationComplete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfEvaluationComplete").toString()));
      }
      if ((jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) && !jsonObj.get("external").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external").toString()));
      }
      if ((jsonObj.get("reportAvailable") != null && !jsonObj.get("reportAvailable").isJsonNull()) && !jsonObj.get("reportAvailable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportAvailable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportAvailable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubjectData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubjectData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubjectData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubjectData.class));

       return (TypeAdapter<T>) new TypeAdapter<SubjectData>() {
           @Override
           public void write(JsonWriter out, SubjectData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubjectData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubjectData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubjectData
   * @throws IOException if the JSON string is invalid with respect to SubjectData
   */
  public static SubjectData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubjectData.class);
  }

  /**
   * Convert an instance of SubjectData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

