/*
 * EX APIs
 * This is the external API specification for EX endpoints.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * EvaluatorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class EvaluatorRequest {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nonnull
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nonnull
  private String lastName;

  public static final String SERIALIZED_NAME_EVALUATOR_EMAIL = "evaluatorEmail";
  @SerializedName(SERIALIZED_NAME_EVALUATOR_EMAIL)
  @javax.annotation.Nonnull
  private String evaluatorEmail;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_EVALUATOR_UNIQUE_IDENTIFIER = "evaluatorUniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_EVALUATOR_UNIQUE_IDENTIFIER)
  @javax.annotation.Nonnull
  private String evaluatorUniqueIdentifier;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public EvaluatorRequest() {
  }

  public EvaluatorRequest firstName(@javax.annotation.Nonnull String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nonnull String firstName) {
    this.firstName = firstName;
  }


  public EvaluatorRequest lastName(@javax.annotation.Nonnull String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nonnull String lastName) {
    this.lastName = lastName;
  }


  public EvaluatorRequest evaluatorEmail(@javax.annotation.Nonnull String evaluatorEmail) {
    this.evaluatorEmail = evaluatorEmail;
    return this;
  }

  /**
   * Get evaluatorEmail
   * @return evaluatorEmail
   */
  @javax.annotation.Nonnull
  public String getEvaluatorEmail() {
    return evaluatorEmail;
  }

  public void setEvaluatorEmail(@javax.annotation.Nonnull String evaluatorEmail) {
    this.evaluatorEmail = evaluatorEmail;
  }


  public EvaluatorRequest username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public EvaluatorRequest evaluatorUniqueIdentifier(@javax.annotation.Nonnull String evaluatorUniqueIdentifier) {
    this.evaluatorUniqueIdentifier = evaluatorUniqueIdentifier;
    return this;
  }

  /**
   * Get evaluatorUniqueIdentifier
   * @return evaluatorUniqueIdentifier
   */
  @javax.annotation.Nonnull
  public String getEvaluatorUniqueIdentifier() {
    return evaluatorUniqueIdentifier;
  }

  public void setEvaluatorUniqueIdentifier(@javax.annotation.Nonnull String evaluatorUniqueIdentifier) {
    this.evaluatorUniqueIdentifier = evaluatorUniqueIdentifier;
  }


  public EvaluatorRequest metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public EvaluatorRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluatorRequest evaluatorRequest = (EvaluatorRequest) o;
    return Objects.equals(this.firstName, evaluatorRequest.firstName) &&
        Objects.equals(this.lastName, evaluatorRequest.lastName) &&
        Objects.equals(this.evaluatorEmail, evaluatorRequest.evaluatorEmail) &&
        Objects.equals(this.username, evaluatorRequest.username) &&
        Objects.equals(this.evaluatorUniqueIdentifier, evaluatorRequest.evaluatorUniqueIdentifier) &&
        Objects.equals(this.metadata, evaluatorRequest.metadata);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, evaluatorEmail, username, evaluatorUniqueIdentifier, metadata);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluatorRequest {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    evaluatorEmail: ").append(toIndentedString(evaluatorEmail)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    evaluatorUniqueIdentifier: ").append(toIndentedString(evaluatorUniqueIdentifier)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("evaluatorEmail");
    openapiFields.add("username");
    openapiFields.add("evaluatorUniqueIdentifier");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("evaluatorEmail");
    openapiRequiredFields.add("evaluatorUniqueIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EvaluatorRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvaluatorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvaluatorRequest is not found in the empty JSON string", EvaluatorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvaluatorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvaluatorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EvaluatorRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("evaluatorEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatorEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluatorEmail").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("evaluatorUniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatorUniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluatorUniqueIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvaluatorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvaluatorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvaluatorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvaluatorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EvaluatorRequest>() {
           @Override
           public void write(JsonWriter out, EvaluatorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvaluatorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EvaluatorRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EvaluatorRequest
   * @throws IOException if the JSON string is invalid with respect to EvaluatorRequest
   */
  public static EvaluatorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvaluatorRequest.class);
  }

  /**
   * Convert an instance of EvaluatorRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

