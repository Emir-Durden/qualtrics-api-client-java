/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * ResponseHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ResponseHistory {
  public static final String SERIALIZED_NAME_RESPONSE_ID = "responseId";
  @SerializedName(SERIALIZED_NAME_RESPONSE_ID)
  @javax.annotation.Nullable
  private String responseId;

  public static final String SERIALIZED_NAME_DISTRIBUTION_ID = "distributionId";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_ID)
  @javax.annotation.Nullable
  private String distributionId;

  public static final String SERIALIZED_NAME_DATE_STARTED = "dateStarted";
  @SerializedName(SERIALIZED_NAME_DATE_STARTED)
  @javax.annotation.Nullable
  private OffsetDateTime dateStarted;

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "dateCompleted";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  @javax.annotation.Nullable
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_SURVEY_FINISHED = "surveyFinished";
  @SerializedName(SERIALIZED_NAME_SURVEY_FINISHED)
  @javax.annotation.Nullable
  private Boolean surveyFinished;

  public static final String SERIALIZED_NAME_SURVEY_ID = "surveyId";
  @SerializedName(SERIALIZED_NAME_SURVEY_ID)
  @javax.annotation.Nullable
  private String surveyId;

  public ResponseHistory() {
  }

  public ResponseHistory responseId(@javax.annotation.Nullable String responseId) {
    this.responseId = responseId;
    return this;
  }

  /**
   * The contact&#39;s response ID. Indicates the contact&#39;s response to the survey.
   * @return responseId
   */
  @javax.annotation.Nullable
  public String getResponseId() {
    return responseId;
  }

  public void setResponseId(@javax.annotation.Nullable String responseId) {
    this.responseId = responseId;
  }


  public ResponseHistory distributionId(@javax.annotation.Nullable String distributionId) {
    this.distributionId = distributionId;
    return this;
  }

  /**
   * The distribution&#39;s ID, which can be used with Get Distribution to obtain more information about the distribution.
   * @return distributionId
   */
  @javax.annotation.Nullable
  public String getDistributionId() {
    return distributionId;
  }

  public void setDistributionId(@javax.annotation.Nullable String distributionId) {
    this.distributionId = distributionId;
  }


  public ResponseHistory dateStarted(@javax.annotation.Nullable OffsetDateTime dateStarted) {
    this.dateStarted = dateStarted;
    return this;
  }

  /**
   * The date and time in UTC in the format yyyy-MM-dd HH:mm:ss that the contact started the survey.
   * @return dateStarted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateStarted() {
    return dateStarted;
  }

  public void setDateStarted(@javax.annotation.Nullable OffsetDateTime dateStarted) {
    this.dateStarted = dateStarted;
  }


  public ResponseHistory dateCompleted(@javax.annotation.Nullable OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
    return this;
  }

  /**
   * The date and time in UTC in the format yyyy-MM-dd HH:mm:ss that the contact completed the survey.
   * @return dateCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }

  public void setDateCompleted(@javax.annotation.Nullable OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public ResponseHistory surveyFinished(@javax.annotation.Nullable Boolean surveyFinished) {
    this.surveyFinished = surveyFinished;
    return this;
  }

  /**
   * Whether this contact finished the survey.
   * @return surveyFinished
   */
  @javax.annotation.Nullable
  public Boolean getSurveyFinished() {
    return surveyFinished;
  }

  public void setSurveyFinished(@javax.annotation.Nullable Boolean surveyFinished) {
    this.surveyFinished = surveyFinished;
  }


  public ResponseHistory surveyId(@javax.annotation.Nullable String surveyId) {
    this.surveyId = surveyId;
    return this;
  }

  /**
   * The survey ID of the survey referenced by this distribution.
   * @return surveyId
   */
  @javax.annotation.Nullable
  public String getSurveyId() {
    return surveyId;
  }

  public void setSurveyId(@javax.annotation.Nullable String surveyId) {
    this.surveyId = surveyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseHistory responseHistory = (ResponseHistory) o;
    return Objects.equals(this.responseId, responseHistory.responseId) &&
        Objects.equals(this.distributionId, responseHistory.distributionId) &&
        Objects.equals(this.dateStarted, responseHistory.dateStarted) &&
        Objects.equals(this.dateCompleted, responseHistory.dateCompleted) &&
        Objects.equals(this.surveyFinished, responseHistory.surveyFinished) &&
        Objects.equals(this.surveyId, responseHistory.surveyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseId, distributionId, dateStarted, dateCompleted, surveyFinished, surveyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseHistory {\n");
    sb.append("    responseId: ").append(toIndentedString(responseId)).append("\n");
    sb.append("    distributionId: ").append(toIndentedString(distributionId)).append("\n");
    sb.append("    dateStarted: ").append(toIndentedString(dateStarted)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    surveyFinished: ").append(toIndentedString(surveyFinished)).append("\n");
    sb.append("    surveyId: ").append(toIndentedString(surveyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("responseId");
    openapiFields.add("distributionId");
    openapiFields.add("dateStarted");
    openapiFields.add("dateCompleted");
    openapiFields.add("surveyFinished");
    openapiFields.add("surveyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseHistory is not found in the empty JSON string", ResponseHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("responseId") != null && !jsonObj.get("responseId").isJsonNull()) && !jsonObj.get("responseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseId").toString()));
      }
      if ((jsonObj.get("distributionId") != null && !jsonObj.get("distributionId").isJsonNull()) && !jsonObj.get("distributionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distributionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distributionId").toString()));
      }
      if ((jsonObj.get("surveyId") != null && !jsonObj.get("surveyId").isJsonNull()) && !jsonObj.get("surveyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surveyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surveyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseHistory>() {
           @Override
           public void write(JsonWriter out, ResponseHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseHistory
   * @throws IOException if the JSON string is invalid with respect to ResponseHistory
   */
  public static ResponseHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseHistory.class);
  }

  /**
   * Convert an instance of ResponseHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

