/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import pl.wtx.qualtrics.api.client.model.CreateContactExportRequestEmbeddedData;
import pl.wtx.qualtrics.api.client.model.Format;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CreateContactExportRequest {
  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nonnull
  private Format format = Format.CSV;

  public static final String SERIALIZED_NAME_EMBEDDED_DATA = "embeddedData";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_DATA)
  @javax.annotation.Nonnull
  private CreateContactExportRequestEmbeddedData embeddedData;

  public static final String SERIALIZED_NAME_CONTACT_LIST_ID = "contactListId";
  @SerializedName(SERIALIZED_NAME_CONTACT_LIST_ID)
  @javax.annotation.Nullable
  private String contactListId;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private Map<String, Object> filter = new HashMap<>();

  public CreateContactExportRequest() {
  }

  public CreateContactExportRequest format(@javax.annotation.Nonnull Format format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nonnull
  public Format getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nonnull Format format) {
    this.format = format;
  }


  public CreateContactExportRequest embeddedData(@javax.annotation.Nonnull CreateContactExportRequestEmbeddedData embeddedData) {
    this.embeddedData = embeddedData;
    return this;
  }

  /**
   * Get embeddedData
   * @return embeddedData
   */
  @javax.annotation.Nonnull
  public CreateContactExportRequestEmbeddedData getEmbeddedData() {
    return embeddedData;
  }

  public void setEmbeddedData(@javax.annotation.Nonnull CreateContactExportRequestEmbeddedData embeddedData) {
    this.embeddedData = embeddedData;
  }


  public CreateContactExportRequest contactListId(@javax.annotation.Nullable String contactListId) {
    this.contactListId = contactListId;
    return this;
  }

  /**
   * If a contactListId is provided. The contacts in the list will be exported instead of the contacts in the directory
   * @return contactListId
   */
  @javax.annotation.Nullable
  public String getContactListId() {
    return contactListId;
  }

  public void setContactListId(@javax.annotation.Nullable String contactListId) {
    this.contactListId = contactListId;
  }


  public CreateContactExportRequest filter(@javax.annotation.Nullable Map<String, Object> filter) {
    this.filter = filter;
    return this;
  }

  public CreateContactExportRequest putFilterItem(String key, Object filterItem) {
    if (this.filter == null) {
      this.filter = new HashMap<>();
    }
    this.filter.put(key, filterItem);
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public Map<String, Object> getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable Map<String, Object> filter) {
    this.filter = filter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateContactExportRequest createContactExportRequest = (CreateContactExportRequest) o;
    return Objects.equals(this.format, createContactExportRequest.format) &&
        Objects.equals(this.embeddedData, createContactExportRequest.embeddedData) &&
        Objects.equals(this.contactListId, createContactExportRequest.contactListId) &&
        Objects.equals(this.filter, createContactExportRequest.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, embeddedData, contactListId, filter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateContactExportRequest {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    embeddedData: ").append(toIndentedString(embeddedData)).append("\n");
    sb.append("    contactListId: ").append(toIndentedString(contactListId)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("format");
    openapiFields.add("embeddedData");
    openapiFields.add("contactListId");
    openapiFields.add("filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("format");
    openapiRequiredFields.add("embeddedData");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateContactExportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateContactExportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateContactExportRequest is not found in the empty JSON string", CreateContactExportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateContactExportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateContactExportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateContactExportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `format`
      Format.validateJsonElement(jsonObj.get("format"));
      // validate the required field `embeddedData`
      CreateContactExportRequestEmbeddedData.validateJsonElement(jsonObj.get("embeddedData"));
      if ((jsonObj.get("contactListId") != null && !jsonObj.get("contactListId").isJsonNull()) && !jsonObj.get("contactListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactListId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateContactExportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateContactExportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateContactExportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateContactExportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateContactExportRequest>() {
           @Override
           public void write(JsonWriter out, CreateContactExportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateContactExportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateContactExportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateContactExportRequest
   * @throws IOException if the JSON string is invalid with respect to CreateContactExportRequest
   */
  public static CreateContactExportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateContactExportRequest.class);
  }

  /**
   * Convert an instance of CreateContactExportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

