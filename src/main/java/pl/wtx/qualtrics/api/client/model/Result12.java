/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import pl.wtx.qualtrics.api.client.model.ElementsInner1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * Information in the result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Result12 {
  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  @javax.annotation.Nonnull
  private List<ElementsInner1> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_TOKEN = "skipToken";
  @SerializedName(SERIALIZED_NAME_SKIP_TOKEN)
  @javax.annotation.Nullable
  private String skipToken;

  public Result12() {
  }

  public Result12 elements(@javax.annotation.Nonnull List<ElementsInner1> elements) {
    this.elements = elements;
    return this;
  }

  public Result12 addElementsItem(ElementsInner1 elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * Get elements
   * @return elements
   */
  @javax.annotation.Nonnull
  public List<ElementsInner1> getElements() {
    return elements;
  }

  public void setElements(@javax.annotation.Nonnull List<ElementsInner1> elements) {
    this.elements = elements;
  }


  public Result12 skipToken(@javax.annotation.Nullable String skipToken) {
    this.skipToken = skipToken;
    return this;
  }

  /**
   * The start position for pagination
   * @return skipToken
   */
  @javax.annotation.Nullable
  public String getSkipToken() {
    return skipToken;
  }

  public void setSkipToken(@javax.annotation.Nullable String skipToken) {
    this.skipToken = skipToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result12 result12 = (Result12) o;
    return Objects.equals(this.elements, result12.elements) &&
        Objects.equals(this.skipToken, result12.skipToken);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(elements, skipToken);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result12 {\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    skipToken: ").append(toIndentedString(skipToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("elements");
    openapiFields.add("skipToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("elements");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Result12
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Result12.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Result12 is not found in the empty JSON string", Result12.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Result12.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Result12` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Result12.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("elements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
      }

      JsonArray jsonArrayelements = jsonObj.getAsJsonArray("elements");
      // validate the required field `elements` (array)
      for (int i = 0; i < jsonArrayelements.size(); i++) {
        ElementsInner1.validateJsonElement(jsonArrayelements.get(i));
      };
      if ((jsonObj.get("skipToken") != null && !jsonObj.get("skipToken").isJsonNull()) && !jsonObj.get("skipToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skipToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skipToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Result12.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Result12' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Result12> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Result12.class));

       return (TypeAdapter<T>) new TypeAdapter<Result12>() {
           @Override
           public void write(JsonWriter out, Result12 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Result12 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Result12 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Result12
   * @throws IOException if the JSON string is invalid with respect to Result12
   */
  public static Result12 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Result12.class);
  }

  /**
   * Convert an instance of Result12 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

