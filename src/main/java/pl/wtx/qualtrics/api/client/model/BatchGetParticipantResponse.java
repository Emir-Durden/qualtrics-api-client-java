/*
 * EX APIs
 * This is the external API specification for EX endpoints.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.qualtrics.api.client.model.Meta;
import pl.wtx.qualtrics.api.client.model.Participant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * BatchGetParticipantResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class BatchGetParticipantResponse {
  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  @javax.annotation.Nonnull
  private List<Participant> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_TOKEN = "skipToken";
  @SerializedName(SERIALIZED_NAME_SKIP_TOKEN)
  @javax.annotation.Nullable
  private String skipToken;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  @javax.annotation.Nonnull
  private Meta meta;

  public BatchGetParticipantResponse() {
  }

  public BatchGetParticipantResponse participants(@javax.annotation.Nonnull List<Participant> participants) {
    this.participants = participants;
    return this;
  }

  public BatchGetParticipantResponse addParticipantsItem(Participant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Get participants
   * @return participants
   */
  @javax.annotation.Nonnull
  public List<Participant> getParticipants() {
    return participants;
  }

  public void setParticipants(@javax.annotation.Nonnull List<Participant> participants) {
    this.participants = participants;
  }


  public BatchGetParticipantResponse skipToken(@javax.annotation.Nullable String skipToken) {
    this.skipToken = skipToken;
    return this;
  }

  /**
   * Get skipToken
   * @return skipToken
   */
  @javax.annotation.Nullable
  public String getSkipToken() {
    return skipToken;
  }

  public void setSkipToken(@javax.annotation.Nullable String skipToken) {
    this.skipToken = skipToken;
  }


  public BatchGetParticipantResponse meta(@javax.annotation.Nonnull Meta meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nonnull
  public Meta getMeta() {
    return meta;
  }

  public void setMeta(@javax.annotation.Nonnull Meta meta) {
    this.meta = meta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetParticipantResponse batchGetParticipantResponse = (BatchGetParticipantResponse) o;
    return Objects.equals(this.participants, batchGetParticipantResponse.participants) &&
        Objects.equals(this.skipToken, batchGetParticipantResponse.skipToken) &&
        Objects.equals(this.meta, batchGetParticipantResponse.meta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participants, skipToken, meta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetParticipantResponse {\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    skipToken: ").append(toIndentedString(skipToken)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("participants");
    openapiFields.add("skipToken");
    openapiFields.add("meta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("participants");
    openapiRequiredFields.add("meta");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetParticipantResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetParticipantResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetParticipantResponse is not found in the empty JSON string", BatchGetParticipantResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetParticipantResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetParticipantResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchGetParticipantResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }

      JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
      // validate the required field `participants` (array)
      for (int i = 0; i < jsonArrayparticipants.size(); i++) {
        Participant.validateJsonElement(jsonArrayparticipants.get(i));
      };
      if ((jsonObj.get("skipToken") != null && !jsonObj.get("skipToken").isJsonNull()) && !jsonObj.get("skipToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skipToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skipToken").toString()));
      }
      // validate the required field `meta`
      Meta.validateJsonElement(jsonObj.get("meta"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetParticipantResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetParticipantResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetParticipantResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetParticipantResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetParticipantResponse>() {
           @Override
           public void write(JsonWriter out, BatchGetParticipantResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetParticipantResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetParticipantResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetParticipantResponse
   * @throws IOException if the JSON string is invalid with respect to BatchGetParticipantResponse
   */
  public static BatchGetParticipantResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetParticipantResponse.class);
  }

  /**
   * Convert an instance of BatchGetParticipantResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

